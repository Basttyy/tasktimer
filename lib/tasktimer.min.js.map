{"version":3,"sources":["webpack://tasktimer/webpack/universalModuleDefinition","webpack://tasktimer/webpack/bootstrap","webpack://tasktimer/./src/index.ts","webpack://tasktimer/./src/utils.ts","webpack://tasktimer/./node_modules/timers-browserify/main.js","webpack://tasktimer/(webpack)/buildin/global.js","webpack://tasktimer/./node_modules/process/browser.js","webpack://tasktimer/./src/Task.ts","webpack://tasktimer/./node_modules/setimmediate/setImmediate.js","webpack://tasktimer/./src/TaskTimer.ts","webpack://tasktimer/./node_modules/eventemitter3/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","setImmediate","clearImmediate","proto","BROWSER","window","utils","NODE","type","toString","match","toLowerCase","getNumber","minimum","defaultValue","getBool","cb","args","_i","arguments","length","setTimeout","apply","concat","id","clearTimeout","immediate","isPromise","then","global","scope","self","Function","Timeout","clearFn","_id","_clearFn","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","g","e","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","len","run","marker","runClearTimeout","Item","array","noop","nextTick","Array","push","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","__assign","assign","_1","utils_1","DEFAULT_TASK_OPTIONS","freeze","enabled","tickDelay","tickInterval","totalRuns","removeOnCompleted","callback","Task","options","_init","_","configurable","set","currentRuns","reset","toJSON","obj","_setTimer","timer","_timer","_emit","event","source","data","error","_done","completed","_taskCompleted","_execCallback","_this","catch","err","TaskTimer","EventType","TASK_ERROR","_run","onRun","undefined","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","Math","random","indexOf","slice","addEventListener","attachEvent","MessageChannel","port1","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","task","extendStatics","__extends","b","setPrototypeOf","__proto__","__","constructor","State","eventemitter3_1","DEFAULT_TIMER_OPTIONS","interval","precision","stopOnCompleted","_super","_timeoutRef","_immediateRef","_reset","opts","state","current","STOPPED","Date","now","stopTime","started","startTime","stopped","elapsed","tickCount","keys","tasks","runCount","add","isArray","forEach","_add","remove","completedCount","TASK_REMOVED","start","_stop","RUNNING","_markTime","STARTED","pause","PAUSED","resume","IDLE","RESUMED","stop","RESET","_getUniqueTaskID","TASK_ADDED","tickCountAfterResume","resumeTime","hrResumeTime","TASK_COMPLETED","taskCount","COMPLETED","_tick","TASK","TICK","hrtime","_getTimeDiff","hrDiff","ceil","diff","floor","num","EventEmitter","has","prefix","Events","EE","fn","context","emitter","TypeError","listener","evt","_events","_eventsCount","clearEvent","eventNames","events","names","getOwnPropertySymbols","handlers","ee","listenerCount","a1","a2","a3","a4","a5","j","prefixed"],"mappings":"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","file":"tasktimer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tasktimer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tasktimer\"] = factory();\n\telse\n\t\troot[\"tasktimer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"lib/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Task\"));\n__export(require(\"./TaskTimer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proto = Object.prototype;\nvar BROWSER = typeof window !== 'undefined';\nvar NODE = !BROWSER;\nvar utils = {\n    BROWSER: BROWSER,\n    NODE: NODE,\n    type: function (object) {\n        return proto.toString.call(object).match(/\\s(\\w+)/i)[1].toLowerCase();\n    },\n    getNumber: function (value, minimum, defaultValue) {\n        return typeof value === 'number'\n            ? (value < minimum ? minimum : value)\n            : defaultValue;\n    },\n    getBool: function (value, defaultValue) {\n        return typeof value !== 'boolean'\n            ? defaultValue\n            : value;\n    },\n    setImmediate: function (cb) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (BROWSER) {\n            return setTimeout(cb.apply(null, args), 0);\n        }\n        return setImmediate.apply(void 0, [cb].concat(args));\n    },\n    clearImmediate: function (id) {\n        if (!id)\n            return;\n        if (BROWSER)\n            return clearTimeout(id);\n        clearImmediate(id);\n    },\n    immediate: function (cb) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var id = utils.setImmediate(function () {\n            cb.apply(null, args);\n            utils.clearImmediate(id);\n        });\n    },\n    /**\n     *  Checks whether the given value is a promise.\n     *  @param {any} value - Value to be checked.\n     *  @return {boolean}\n     */\n    isPromise: function (value) {\n        return value\n            && utils.type(value) === 'promise'\n            && typeof value.then === 'function';\n    }\n};\nexports.utils = utils;\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n/* tslint:disable:no-empty */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\".\");\nvar utils_1 = require(\"./utils\");\n/**\n *  @private\n */\nvar DEFAULT_TASK_OPTIONS = Object.freeze({\n    enabled: true,\n    tickDelay: 0,\n    tickInterval: 1,\n    totalRuns: null,\n    immediate: false,\n    removeOnCompleted: false,\n    callback: function () { }\n});\n/**\n *  Represents the class that holds the configurations and the callback function\n *  required to run a task.\n */\nvar Task = /** @class */ (function () {\n    /**\n     *  Initializes a new instance of `Task` class.\n     *  @constructor\n     *  @param {ITaskOptions} options Task options.\n     */\n    function Task(options) {\n        this._init(options);\n    }\n    Object.defineProperty(Task.prototype, \"id\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) MEMBERS\n        // ---------------------------\n        /**\n         *  Gets the unique ID of the task.\n         *  @type {string}\n         */\n        get: function () {\n            return this._.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"enabled\", {\n        /**\n         *  Specifies whether this task is currently enabled. This essentially gives\n         *  you a manual control over execution. The task will always bypass the\n         *  callback while this is set to `false`.\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.enabled;\n        },\n        set: function (value) {\n            this._.enabled = utils_1.utils.getBool(value, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickDelay\", {\n        /**\n         *  Gets or sets the number of ticks to allow before running the task for\n         *  the first time.\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickDelay;\n        },\n        set: function (value) {\n            this._.tickDelay = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.tickDelay);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickInterval\", {\n        /**\n         *  Gets or sets the tick interval that the task should be run on. The unit\n         *  is \"ticks\" (not milliseconds). For instance, if the timer interval is\n         *  `1000` milliseconds, and we add a task with `5` tick intervals. The task\n         *  will run on every `5` <b>seconds</b>.\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickInterval;\n        },\n        set: function (value) {\n            this._.tickInterval = utils_1.utils.getNumber(value, 1, DEFAULT_TASK_OPTIONS.tickInterval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"totalRuns\", {\n        /**\n         *  Gets or sets the total number of times the task should be run. `0` or\n         *  `null` means unlimited (until the timer has stopped).\n         *  @type {number}\n         */\n        get: function () {\n            return this._.totalRuns;\n        },\n        set: function (value) {\n            this._.totalRuns = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.totalRuns);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"immediate\", {\n        /**\n         *  Specifies whether to wrap callback in a `setImmediate()` call before\n         *  executing. This can be useful if the task is not doing any I/O or using\n         *  any JS timers but synchronously blocking the event loop.\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.immediate;\n        },\n        set: function (value) {\n            this._.immediate = utils_1.utils.getBool(value, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"currentRuns\", {\n        /**\n         *  Gets the number of times, this task has been run.\n         *  @type {number}\n         */\n        get: function () {\n            return this._.currentRuns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"callback\", {\n        /**\n         *  Gets the callback function to be executed on each run.\n         *  @type {TaskCallback}\n         */\n        get: function () {\n            return this._.callback;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"removeOnCompleted\", {\n        /**\n         *  Gets or sets whether to remove the task (to free up memory) when task\n         *  has completed its executions (runs). For this to take affect, the task\n         *  should have `totalRuns` and/or `stopDate` configured.\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.removeOnCompleted;\n        },\n        set: function (value) {\n            this._.removeOnCompleted = utils_1.utils.getBool(value, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"completed\", {\n        /**\n         *  Specifies whether the task has completed all runs (executions). Note\n         *  that if `totalRuns` and/or `stopDate` is not set, this will never return\n         *  `true`; since the task has no execution limit set.\n         *  @type {boolean}\n         */\n        get: function () {\n            // TODO: check stopDate here\n            var canRun = !this.totalRuns || this.currentRuns < this.totalRuns;\n            return !canRun;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Resets the current number of runs. This will keep the task running for\n     *  the same amount of `tickIntervals` initially configured.\n     *  @chainable\n     *\n     *  @param {ITaskBaseOptions} [options] If set, this will also re-configure the task.\n     *\n     *  @returns {Task}\n     */\n    Task.prototype.reset = function (options) {\n        this._.currentRuns = 0;\n        if (options) {\n            if (options.id)\n                throw new Error('Cannot change ID of a task.');\n            this._init(options);\n        }\n        return this;\n    };\n    /**\n     *  Never return JSON From toJSON.\n     *  It should return an object.\n     *  @private\n     */\n    Task.prototype.toJSON = function () {\n        var obj = __assign({}, this._);\n        delete obj.callback;\n        return obj;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) MEMBERS\n    // ---------------------------\n    /**\n     *  Only used by `TaskTimer`.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    Task.prototype._setTimer = function (timer) {\n        this._timer = timer;\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._emit = function (type, object) {\n        var event = {\n            type: type,\n            source: this\n        };\n        if (object instanceof Task) {\n            event.data = object;\n        }\n        else {\n            event.error = object;\n        }\n        this._timer.emit(type, event);\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._done = function () {\n        this._.currentRuns += 1;\n        if (this.completed)\n            this._timer._taskCompleted(this);\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._execCallback = function (timer) {\n        var _this = this;\n        try {\n            var o = this.callback.apply(null, [this, this._done]);\n            if (this.callback.length >= 2) {\n                // handled by _done() (called within the task callback)\n            }\n            else if (utils_1.utils.isPromise(o)) {\n                o.then(function () {\n                    _this._done();\n                })\n                    .catch(function (err) {\n                    _this._emit(_1.TaskTimer.EventType.TASK_ERROR, err);\n                });\n            }\n            else {\n                this._done();\n            }\n        }\n        catch (err) {\n            this._emit(_1.TaskTimer.EventType.TASK_ERROR, err);\n        }\n    };\n    /**\n     *  Only used by `TaskTimer`.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    Task.prototype._run = function (onRun, timer) {\n        var _this = this;\n        if (!this.enabled || this.completed)\n            return;\n        if (this.immediate) {\n            utils_1.utils.setImmediate(function () { return _this._execCallback(timer); });\n        }\n        else {\n            this._execCallback(timer);\n        }\n        onRun();\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._init = function (options) {\n        if (!options || !options.id) {\n            throw new Error('A unique task ID is required. Use TaskTimer#add() to create a task with auto-generated unique ID.');\n        }\n        if (typeof options.callback !== 'function') {\n            throw new Error('A callback function is required for a task to be run.');\n        }\n        this._ = __assign({ currentRuns: 0 }, DEFAULT_TASK_OPTIONS, (options || {}));\n    };\n    return Task;\n}());\nexports.Task = Task;\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","\"use strict\";\n/* tslint:disable:max-file-line-count */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// dep modules\nvar eventemitter3_1 = require(\"eventemitter3\");\n// own modules\nvar _1 = require(\".\");\nvar utils_1 = require(\"./utils\");\n/**\n *  @private\n */\nvar DEFAULT_TIMER_OPTIONS = Object.freeze({\n    interval: 1000,\n    precision: true,\n    stopOnCompleted: false\n});\n/**\n *  TaskTimer • https://github.com/onury/tasktimer\n *  @license MIT\n *  @copyright 2018, Onur Yıldırım <onur@cutepilot.com>\n */\n/**\n *  A timer utility for running periodic tasks on the given interval ticks.\n *  This is useful when you want to run or schedule multiple tasks on a single\n *  timer instance.\n *\n *  This class extends `EventEmitter3` which is an `EventEmitter` implementation\n *  for both Node and browser. Only a small set of its methods are documented in\n *  this documentation. For a complete list, refer to Node.js documentation.\n *\n *  @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n */\nvar TaskTimer = /** @class */ (function (_super) {\n    __extends(TaskTimer, _super);\n    // ---------------------------\n    // CONSTRUCTOR\n    // ---------------------------\n    /**\n     *  Constructs a new `TaskTimer` instance with the given time interval (in\n     *  milliseconds).\n     *  @constructor\n     *\n     *  @param {ITaskTimerOptions|number} [options] - Either TaskTimer options\n     *  or a base interval (in milliseconds). Since the tasks run on ticks\n     *  instead of millisecond intervals; this value operates as the base\n     *  resolution for all tasks. If you are running heavy tasks, lower interval\n     *  requires higher CPU power. This value can be updated any time by setting\n     *  the `interval` property on the instance.\n     *\n     *  @example\n     *  const timer = new TaskTimer(1000); // milliseconds\n     *  // Execute some code on each tick...\n     *  timer.on('tick', () => {\n     *      console.log('tick count: ' + timer.tickCount);\n     *      console.log('elapsed time: ' + timer.time.elapsed + ' ms.');\n     *  });\n     *  // Or add a task named 'heartbeat' that runs every 5 ticks and a total of 10 times.\n     *  const task = {\n     *      id: 'heartbeat',\n     *      tickInterval: 5, // ticks\n     *      totalRuns: 10,   // times\n     *      callback: function (task) {\n     *          console.log(task.id + ' task has run ' + task.currentRuns + ' times.');\n     *      }\n     *  };\n     *  timer.addTask(task).start();\n     */\n    function TaskTimer(options) {\n        var _this = _super.call(this) || this;\n        _this._timeoutRef = null;\n        _this._immediateRef = null;\n        _this._reset();\n        _this._.opts = {};\n        var opts = typeof options === 'number'\n            ? { interval: options }\n            : options || {};\n        _this.interval = opts.interval;\n        _this.precision = opts.precision;\n        _this.stopOnCompleted = opts.stopOnCompleted;\n        return _this;\n    }\n    Object.defineProperty(TaskTimer.prototype, \"interval\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) PROPERTIES\n        // ---------------------------\n        /**\n         *  Gets or sets the timer interval in milliseconds.\n         *\n         *  Since the tasks run on ticks instead of millisecond intervals; this\n         *  value operates as the base resolution for all tasks. If you are running\n         *  heavy tasks; lower interval requires higher CPU power.\n         *  @memberof TaskTimer\n         *  @type {number}\n         */\n        get: function () {\n            return this._.opts.interval;\n        },\n        set: function (value) {\n            this._.opts.interval = utils_1.utils.getNumber(value, 20, DEFAULT_TIMER_OPTIONS.interval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"precision\", {\n        /**\n         *  Gets or sets whether the timer should auto-adjust the delay between\n         *  ticks if it's off due to task load. Note that precision will be as high\n         *  as possible but it still can be off by a few milliseconds; depending on\n         *  the CPU or the load.\n         *  @memberof TaskTimer\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.opts.precision;\n        },\n        set: function (value) {\n            this._.opts.precision = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.precision);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"stopOnCompleted\", {\n        /**\n         *  Gets or sets whether the timer should automatically stop when all tasks\n         *  are completed. For this to take affect, all added tasks should have\n         *  `totalRuns` and/or `stopDate` configured. This option can be set/changed\n         *  at any time.\n         *  @memberof TaskTimer\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.opts.stopOnCompleted;\n        },\n        set: function (value) {\n            this._.opts.stopOnCompleted = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.stopOnCompleted);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"state\", {\n        /**\n         *  Gets the current state of the timer.\n         *  For possible values, see `TaskTimer.State` enumeration.\n         *  @memberof TaskTimer\n         *  @type {TaskTimer.State}\n         *  @readonly\n         */\n        get: function () {\n            return this._.state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"time\", {\n        /**\n         *  Gets time information for the latest run of the timer.\n         *  `#time.started` indicates the start time of the timer.\n         *  `#time.stopped` indicates the stop time of the timer. (`0` if still running.)\n         *  `#time.elapsed` indicates the elapsed time of the timer.\n         *  @memberof TaskTimer\n         *  @type {ITimeInfo}\n         *  @readonly\n         */\n        get: function () {\n            var current = this.state !== TaskTimer.State.STOPPED ? Date.now() : this._.stopTime;\n            return Object.freeze({\n                started: this._.startTime,\n                stopped: this._.stopTime,\n                elapsed: current - this._.startTime\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"tickCount\", {\n        /**\n         *  Gets the current tick count for the latest run of the timer.\n         *  This value will be reset to `0` when the timer is stopped or reset.\n         *  @memberof TaskTimer\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.tickCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"taskCount\", {\n        /**\n         *  Gets the current task count. Tasks remain even after the timer is\n         *  stopped. But they will be removed if the timer is reset.\n         *  @memberof TaskTimer\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return Object.keys(this._.tasks).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"runCount\", {\n        /**\n         *  Gets the total number of all task executions (runs).\n         *  @memberof TaskTimer\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.runCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // ---------------------------\n    // PUBLIC (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  Gets the task with the given ID.\n     *  @memberof TaskTimer\n     *\n     *  @param {String} id - ID of the task.\n     *\n     *  @returns {Task}\n     */\n    TaskTimer.prototype.get = function (id) {\n        return this._.tasks[id] || null;\n    };\n    /**\n     *  Adds a collection of new tasks for the timer.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {Task|ITaskOptions|TaskCallback|Array<any>} task - Either a\n     *  single task, task options object or the callback function; or a mixture\n     *  of these as an array.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task callback is not set or a task with the given\n     *  name already exists.\n     */\n    TaskTimer.prototype.add = function (task) {\n        var _this = this;\n        var list = _ensureArray(task);\n        (list || []).forEach(function (item) { return _this._add(item); });\n        return this;\n    };\n    /**\n     *  Removes the task by the given name.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {string|Task} task - Task to be removed. Either pass the\n     *  name or the task itself.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task with the given name does not exist.\n     */\n    TaskTimer.prototype.remove = function (task) {\n        var id = typeof task === 'string' ? task : task.id;\n        task = this.get(id);\n        if (!id || !task) {\n            throw new Error(\"No tasks exist with ID: '\" + id + \"'.\");\n        }\n        // first decrement completed tasks count if this is a completed task.\n        if (task.completed && this._.completedCount > 0)\n            this._.completedCount--;\n        this._.tasks[id] = null;\n        delete this._.tasks[id];\n        this._emit(TaskTimer.EventType.TASK_REMOVED, task);\n        return this;\n    };\n    /**\n     *  Starts the timer and puts the timer in `RUNNING` state. If it's already\n     *  running, this will reset the start/stop time and tick count, but will not\n     *  reset (or remove) existing tasks.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.start = function () {\n        this._stop();\n        this._.state = TaskTimer.State.RUNNING;\n        this._.tickCount = 0;\n        this._.runCount = 0;\n        this._.stopTime = 0;\n        this._markTime();\n        this._.startTime = Date.now();\n        this._emit(TaskTimer.EventType.STARTED);\n        this._run();\n        return this;\n    };\n    /**\n     *  Pauses the timer, puts the timer in `PAUSED` state and all tasks on hold.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.pause = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.state = TaskTimer.State.PAUSED;\n        this._emit(TaskTimer.EventType.PAUSED);\n        return this;\n    };\n    /**\n     *  Resumes the timer and puts the timer in `RUNNING` state; if previuosly\n     *  paused. In this state, all existing tasks are resumed.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.resume = function () {\n        if (this.state === TaskTimer.State.IDLE) {\n            this.start();\n            return this;\n        }\n        if (this.state !== TaskTimer.State.PAUSED)\n            return this;\n        this._markTime();\n        this._.state = TaskTimer.State.RUNNING;\n        this._emit(TaskTimer.EventType.RESUMED);\n        this._run();\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `STOPPED` state. In this state, all\n     *  existing tasks are stopped and no values or tasks are reset until\n     *  re-started or explicitly calling reset.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.stop = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.stopTime = Date.now();\n        this._.state = TaskTimer.State.STOPPED;\n        this._emit(TaskTimer.EventType.STOPPED);\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `IDLE` state.\n     *  This will reset the ticks and removes all tasks silently; meaning no\n     *  other events will be emitted such as `\"taskRemoved\"`.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.reset = function () {\n        this._reset();\n        this._emit(TaskTimer.EventType.RESET);\n        return this;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  @private\n     */\n    TaskTimer.prototype._emit = function (type, data) {\n        var event = {\n            type: type,\n            source: this,\n            data: data\n        };\n        return this.emit(type, event);\n    };\n    /**\n     *  Adds a new task for the timer.\n     *  @private\n     *\n     *  @param {Task|ITaskOptions|TaskCallback} options - Either a task instance,\n     *  task options object or the callback function to be executed on tick\n     *  intervals.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If the task callback is not set or a task with the\n     *  given name already exists.\n     */\n    TaskTimer.prototype._add = function (options) {\n        if (typeof options === 'function') {\n            options = {\n                callback: options\n            };\n        }\n        if (_type(options) === 'object' && !options.id) {\n            options.id = this._getUniqueTaskID();\n        }\n        if (this.get(options.id)) {\n            throw new Error(\"A task with name '\" + options.id + \"' already exists.\");\n        }\n        var task = options instanceof _1.Task ? options : new _1.Task(options);\n        task._setTimer(this);\n        this._.tasks[task.id] = task;\n        this._emit(TaskTimer.EventType.TASK_ADDED, task);\n        return this;\n    };\n    /**\n     *  Stops the timer.\n     *  @private\n     */\n    TaskTimer.prototype._stop = function () {\n        this._.tickCountAfterResume = 0;\n        if (this._timeoutRef) {\n            clearTimeout(this._timeoutRef);\n            this._timeoutRef = null;\n        }\n        if (this._immediateRef) {\n            utils_1.utils.clearImmediate(this._immediateRef);\n            this._immediateRef = null;\n        }\n    };\n    /**\n     *  Resets the timer.\n     *  @private\n     */\n    TaskTimer.prototype._reset = function () {\n        this._ = {\n            opts: (this._ || {}).opts,\n            state: TaskTimer.State.IDLE,\n            tasks: {},\n            tickCount: 0,\n            runCount: 0,\n            startTime: 0,\n            stopTime: 0,\n            completedCount: 0,\n            resumeTime: 0,\n            hrResumeTime: null,\n            tickCountAfterResume: 0\n        };\n        this._stop();\n    };\n    /**\n     *  Called (by Task instance) when it has completed all of its runs.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    TaskTimer.prototype._taskCompleted = function (task) {\n        this._.completedCount++;\n        this._emit(TaskTimer.EventType.TASK_COMPLETED, task);\n        if (task.removeOnCompleted)\n            this.remove(task);\n        if (this._.completedCount === this.taskCount) {\n            this._emit(TaskTimer.EventType.COMPLETED);\n            if (this.stopOnCompleted)\n                this.stop();\n        }\n    };\n    /**\n     *  Handler to be executed on each tick.\n     *  @private\n     */\n    TaskTimer.prototype._tick = function () {\n        var _this = this;\n        this._.state = TaskTimer.State.RUNNING;\n        var id;\n        var task;\n        var tasks = this._.tasks;\n        this._.tickCount += 1;\n        this._.tickCountAfterResume += 1;\n        // tslint:disable:forin\n        for (id in tasks) {\n            task = tasks[id];\n            if (!task\n                || this.tickCount < task.tickDelay // wait for tickDelay if set\n                || (this.tickCount - task.tickDelay) % task.tickInterval !== 0) {\n                continue;\n            }\n            // below will not execute if task is disabled or already\n            // completed.\n            task._run(function () {\n                _this._.runCount += 1;\n                _this._emit(TaskTimer.EventType.TASK, task);\n            }, this);\n        }\n        this._emit(TaskTimer.EventType.TICK);\n        this._run();\n    };\n    /**\n     *  Marks the resume (or start) time in milliseconds or high-resolution time\n     *  if available.\n     *  @private\n     */\n    TaskTimer.prototype._markTime = function () {\n        if (utils_1.utils.BROWSER) {\n            this._.resumeTime = Date.now();\n        }\n        else {\n            this._.hrResumeTime = process.hrtime();\n        }\n    };\n    /**\n     *  Gets the time difference in milliseconds sinct the last resume or start\n     *  time.\n     *  @private\n     */\n    TaskTimer.prototype._getTimeDiff = function () {\n        // Date.now() is ~2x faster than Date#getTime()\n        if (utils_1.utils.BROWSER)\n            return Date.now() - this._.resumeTime;\n        var hrDiff = process.hrtime(this._.hrResumeTime);\n        return Math.ceil((hrDiff[0] * 1000) + (hrDiff[1] / 1e6));\n    };\n    /**\n     *  Runs the timer.\n     *  @private\n     */\n    TaskTimer.prototype._run = function () {\n        var _this = this;\n        if (this.state !== TaskTimer.State.RUNNING)\n            return;\n        var interval = this.interval;\n        // we'll get a precise interval by checking if our clock is already\n        // drifted.\n        if (this.precision) {\n            var diff = this._getTimeDiff();\n            // did we reach this expected tick count for the given time period?\n            // calculated count should not be greater than tickCountAfterResume\n            if (Math.floor(diff / interval) > this._.tickCountAfterResume) {\n                // if we're really late, run immediately!\n                this._immediateRef = utils_1.utils.setImmediate(function () { return _this._tick(); });\n                return;\n            }\n            // if we still have time but a bit off, update next interval.\n            interval = interval - (diff % interval);\n        }\n        this._timeoutRef = setTimeout(function () { return _this._tick(); }, interval);\n    };\n    /**\n     *  Gets a unique task ID.\n     *  @private\n     */\n    TaskTimer.prototype._getUniqueTaskID = function () {\n        var num = this.taskCount;\n        var id;\n        while (!id || this.get(id)) {\n            num++;\n            id = 'task' + num;\n        }\n        return id;\n    };\n    return TaskTimer;\n}(eventemitter3_1.EventEmitter));\nexports.TaskTimer = TaskTimer;\n// ---------------------------\n// NAMESPACE\n// ---------------------------\n// tslint:disable:no-namespace\n(function (TaskTimer) {\n    /**\n     *  Represents the class that holds the configurations and the callback function\n     *  required to run a task.\n     *  @class\n     */\n    TaskTimer.Task = _1.Task;\n    /**\n     *  Enumerates `TaskTimer` states.\n     *  @enum {String}\n     *  @readonly\n     */\n    var State;\n    (function (State) {\n        /**\n         *  Indicates that the timer is in `idle` state.\n         *  This is the initial state when the `TaskTimer` instance is first created.\n         *  Also when an existing timer is reset, it will be `idle`.\n         *  @memberof TaskTimer.State\n         *  @type {Number}\n         */\n        State[\"IDLE\"] = \"idle\";\n        /**\n         *  Indicates that the timer is in `running` state; such as when the timer is\n         *  started or resumed.\n         *  @memberof TaskTimer.State\n         *  @type {Number}\n         */\n        State[\"RUNNING\"] = \"running\";\n        /**\n         *  Indicates that the timer is in `paused` state.\n         *  @memberof TaskTimer.State\n         *  @type {Number}\n         */\n        State[\"PAUSED\"] = \"paused\";\n        /**\n         *  Indicates that the timer is in `stopped` state.\n         *  @memberof TaskTimer.State\n         *  @type {Number}\n         */\n        State[\"STOPPED\"] = \"stopped\";\n    })(State = TaskTimer.State || (TaskTimer.State = {}));\n    /**\n     *  Enumerates the `TaskTimer` event types.\n     *  @enum {String}\n     *  @readonly\n     */\n    var EventType;\n    (function (EventType) {\n        /**\n         *  Emitted on each tick (interval) of `TaskTimer`.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TICK\"] = \"tick\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  started.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"STARTED\"] = \"started\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  resumed.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"RESUMED\"] = \"resumed\";\n        /**\n         *  Emitted when the timer is put in `PAUSED` state.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"PAUSED\"] = \"paused\";\n        /**\n         *  Emitted when the timer is put in `STOPPED` state.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"STOPPED\"] = \"stopped\";\n        /**\n         *  Emitted when the timer is reset.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"RESET\"] = \"reset\";\n        /**\n         *  Emitted when a task is executed.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TASK\"] = \"task\";\n        /**\n         *  Emitted when a task is added to `TaskTimer` instance.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TASK_ADDED\"] = \"taskAdded\";\n        /**\n         *  Emitted when a task is removed from `TaskTimer` instance.\n         *  Note that this will not be emitted when `.reset()` is called; which\n         *  removes all tasks silently.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TASK_REMOVED\"] = \"taskRemoved\";\n        /**\n         *  Emitted when a task has completed all of its executions (runs)\n         *  or reached its stopping date/time (if set). Note that this event\n         *  will only be fired if the tasks has a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TASK_COMPLETED\"] = \"taskCompleted\";\n        /**\n         *  Emitted when a task produces an error on its execution.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TASK_ERROR\"] = \"taskError\";\n        /**\n         *  Emitted when all tasks have completed all of their executions (runs)\n         *  or reached their stopping date/time (if set). Note that this event\n         *  will only be fired if all tasks have a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"COMPLETED\"] = \"completed\";\n    })(EventType = TaskTimer.EventType || (TaskTimer.EventType = {}));\n})(TaskTimer || (TaskTimer = {}));\nexports.TaskTimer = TaskTimer;\n// ---------------------------\n// HELPER METHODS\n// ---------------------------\n/**\n *  @private\n */\nfunction _ensureArray(o) {\n    return o\n        ? !Array.isArray(o) ? [o] : o\n        : [];\n}\n/**\n *  @private\n */\nfunction _type(o) {\n    return Object.prototype.toString.call(o).match(/\\s(\\w+)/i)[1].toLowerCase();\n}\n// ---------------------------\n// ADDITIONAL DOCUMENTATION\n// ---------------------------\n/**\n *  Adds the listener function to the end of the listeners array for the event\n *  named `eventName`. No checks are made to see if the listener has already\n *  been added. Multiple calls passing the same combination of eventName and\n *  listener will result in the listener being added, and called, multiple times.\n *  @name TaskTimer#on\n *  @function\n *  @alias TaskTimer#addListener\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Adds a one time listener function for the event named `eventName`. The next\n *  time eventName is triggered, this listener is removed and then invoked.\n *  @name TaskTimer#once\n *  @function\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Removes the specified `listener` from the listener array for the event\n *  named `eventName`.\n *  @name TaskTimer#off\n *  @function\n *  @alias TaskTimer#removeListener\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be removed.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Removes all listeners, or those of the specified eventName.\n *  @name TaskTimer#removeAllListeners\n *  @function\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be removed.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n"],"sourceRoot":""}