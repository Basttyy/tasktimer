{"version":3,"sources":["webpack://tasktimer/webpack/universalModuleDefinition","webpack://tasktimer/webpack/bootstrap","webpack://tasktimer/./src/index.ts","webpack://tasktimer/./src/Task.ts","webpack://tasktimer/./src/TaskTimer.ts","webpack://tasktimer/./node_modules/eventemitter3/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","DEFAULT_TASK_OPTIONS","freeze","enabled","tickDelay","tickInterval","totalRuns","removeOnCompleted","callback","Task","options","_init","_","configurable","set","Boolean","currentRuns","reset","Error","toJSON","obj","assign","_run","onRun","completed","apply","extendStatics","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","eventemitter3_1","_1","DEFAULT_TIMER_OPTIONS","interval","stopOnCompleted","TaskTimer","_super","_this","_timer","_reset","state","current","State","STOPPED","Date","now","stopTime","started","startTime","stopped","elapsed","tickCount","keys","tasks","length","runCount","add","task","isArray","forEach","item","_add","remove","completedCount","_emit","EventType","TASK_REMOVED","start","_stop","RUNNING","STARTED","pause","PAUSED","resume","RESUMED","stop","RESET","type","data","event","source","emit","toString","match","toLowerCase","_getNewTaskName","TASK_ADDED","clearInterval","IDLE","_tick","TASK","TASK_COMPLETED","taskCount","COMPLETED","TICK","setInterval","num","EventEmitter","has","prefix","Events","addListener","emitter","fn","context","once","TypeError","listener","evt","_events","push","_eventsCount","clearEvent","eventNames","events","names","slice","getOwnPropertySymbols","concat","listeners","handlers","ee","listenerCount","a1","a2","a3","a4","a5","args","len","arguments","removeListener","undefined","j","on","removeAllListeners","off","prefixed"],"mappings":"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","file":"tasktimer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tasktimer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tasktimer\"] = factory();\n\telse\n\t\troot[\"tasktimer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"lib/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Task\"));\n__export(require(\"./TaskTimer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *  @private\n */\nvar DEFAULT_TASK_OPTIONS = Object.freeze({\n    enabled: true,\n    tickDelay: 0,\n    tickInterval: 1,\n    totalRuns: null,\n    removeOnCompleted: false,\n    callback: function () { }\n});\n/**\n *  Represents the class that holds the configurations and the callback function\n *  required to run a task.\n */\nvar Task = /** @class */ (function () {\n    /**\n     *  Initializes a new instance of `Task` class.\n     *  @constructor\n     *  @param {ITaskOptions} options Task options.\n     */\n    function Task(options) {\n        this._init(options);\n    }\n    Object.defineProperty(Task.prototype, \"name\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) MEMBERS\n        // ---------------------------\n        /**\n         *  Gets the unique name of the task.\n         *  @type {string}\n         */\n        get: function () {\n            return this._.name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"enabled\", {\n        /**\n         *  Specifies whether this task is currently enabled. This essentially gives\n         *  you a manual control over execution. The task will always bypass the\n         *  callback while this is set to `false`.\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.enabled;\n        },\n        set: function (value) {\n            this._.enabled = Boolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickDelay\", {\n        /**\n         *  Gets or sets the number of ticks to allow before running the task for\n         *  the first time.\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickDelay;\n        },\n        set: function (value) {\n            this._.tickDelay = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickInterval\", {\n        /**\n         *  Gets or sets the tick interval that the task should be run on. The unit\n         *  is \"ticks\" (not milliseconds). For instance, if the timer interval is\n         *  `1000` milliseconds, and we add a task with `5` tick intervals. The task\n         *  will run on every `5` <b>seconds</b>.\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickInterval;\n        },\n        set: function (value) {\n            this._.tickInterval = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"totalRuns\", {\n        /**\n         *  Gets or sets the total number of times the task should be run. `0` or\n         *  `null` means unlimited (until the timer has stopped).\n         *  @type {number}\n         */\n        get: function () {\n            return this._.totalRuns;\n        },\n        set: function (value) {\n            this._.totalRuns = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"currentRuns\", {\n        /**\n         *  Gets the number of times, this task has been run.\n         *  @type {number}\n         */\n        get: function () {\n            return this._.currentRuns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"callback\", {\n        /**\n         *  Gets the callback function to be executed on each run.\n         *  @type {TaskCallback}\n         */\n        get: function () {\n            return this._.callback;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"removeOnCompleted\", {\n        /**\n         *  Gets or sets whether to remove the task (to free up memory) when task\n         *  has completed its executions (runs). For this to take affect, the task\n         *  should have `totalRuns` and/or `stopDate` configured.\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.removeOnCompleted;\n        },\n        set: function (value) {\n            this._.removeOnCompleted = Boolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"completed\", {\n        /**\n         *  Specifies whether the task has completed all runs (executions). Note\n         *  that if `totalRuns` and/or `stopDate` is not set, this will never return\n         *  `true`; since the task has no execution limit set.\n         *  @type {boolean}\n         */\n        get: function () {\n            var canRun = !this.totalRuns || this.currentRuns < this.totalRuns;\n            return !canRun;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Resets the current number of runs. This will keep the task running for\n     *  the same amount of `tickIntervals` initially configured.\n     *  @chainable\n     *\n     *  @param {ITaskBaseOptions} [options] If set, this will also re-configure the task.\n     *\n     *  @returns {Task}\n     */\n    Task.prototype.reset = function (options) {\n        this._.currentRuns = 0;\n        if (options) {\n            if (options.name)\n                throw new Error('Cannot rename a task.');\n            this._init(options);\n        }\n        return this;\n    };\n    /**\n     *  Never return JSON From toJSON.\n     *  It should return an object.\n     *  @private\n     */\n    Task.prototype.toJSON = function () {\n        var obj = Object.assign({}, this._);\n        delete obj.callback;\n        return obj;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) MEMBERS\n    // ---------------------------\n    /**\n     *  @private\n     */\n    // @ts-ignore: TS6133: '_run' is declared but its value is never read. (private but used in TaskTimer)\n    Task.prototype._run = function (onRun) {\n        if (!this.enabled || this.completed)\n            return;\n        this._.currentRuns += 1;\n        this.callback.apply(null, [this]);\n        onRun();\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._init = function (options) {\n        if (!options || !options.name) {\n            throw new Error('A unique task name is required. Use TaskTimer#add() to create a task with auto-generated name.');\n        }\n        if (typeof options.callback !== 'function') {\n            throw new Error('A callback function is required for a task to be run.');\n        }\n        this._ = Object.assign({ currentRuns: 0 }, DEFAULT_TASK_OPTIONS, options);\n    };\n    return Task;\n}());\nexports.Task = Task;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// dep modules\nvar eventemitter3_1 = require(\"eventemitter3\");\n// own modules\nvar _1 = require(\".\");\n/**\n *  @private\n */\nvar DEFAULT_TIMER_OPTIONS = Object.freeze({\n    interval: 1000,\n    stopOnCompleted: false\n});\n/**\n *  TaskTimer • https://github.com/onury/tasktimer\n *  @license MIT\n *  @copyright 2018, Onur Yıldırım <onur@cutepilot.com>\n */\n/**\n *  A timer utility for running periodic tasks on the given interval ticks.\n *  This is useful when you want to run or schedule multiple tasks on a single\n *  timer instance.\n *\n *  This class extends `EventEmitter3` which is an `EventEmitter` implementation\n *  for both Node and browser. Only a small set of its methods are documented in\n *  this documentation. For a complete list, refer to Node.js documentation.\n *\n *  @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n */\nvar TaskTimer = /** @class */ (function (_super) {\n    __extends(TaskTimer, _super);\n    // ---------------------------\n    // CONSTRUCTOR\n    // ---------------------------\n    /**\n     *  Constructs a new `TaskTimer` instance with the given time interval (in\n     *  milliseconds).\n     *  @constructor\n     *\n     *  @param {ITaskTimerOptions|number} [options] - Either TaskTimer options\n     *  or a base interval (in milliseconds). Since the tasks run on ticks\n     *  instead of millisecond intervals; this value operates as the base\n     *  resolution for all tasks. If you are running heavy tasks, lower interval\n     *  requires higher CPU power. This value can be updated any time by setting\n     *  the `interval` property on the instance.\n     *  @returns {TaskTimer}\n     *\n     *  @example\n     *  const timer = new TaskTimer(1000); // milliseconds\n     *  // Execute some code on each tick...\n     *  timer.on('tick', () => {\n     *      console.log('tick count: ' + timer.tickCount);\n     *      console.log('elapsed time: ' + timer.time.elapsed + ' ms.');\n     *  });\n     *  // Or add a task named 'heartbeat' that runs every 5 ticks and a total of 10 times.\n     *  const task = {\n     *      name: 'heartbeat',\n     *      tickInterval: 5, // ticks\n     *      totalRuns: 10,   // times\n     *      callback: function (task) {\n     *          console.log(task.name + ' task has run ' + task.currentRuns + ' times.');\n     *      }\n     *  };\n     *  timer.addTask(task).start();\n     */\n    function TaskTimer(options) {\n        var _this = _super.call(this) || this;\n        options = typeof options !== 'number'\n            ? Object.assign({}, DEFAULT_TIMER_OPTIONS, options || {})\n            : Object.assign({}, DEFAULT_TIMER_OPTIONS, { interval: options });\n        _this._timer = null;\n        _this._reset();\n        _this._.options = options;\n        return _this;\n    }\n    Object.defineProperty(TaskTimer.prototype, \"interval\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) PROPERTIES\n        // ---------------------------\n        /**\n         *  Gets or sets the timer interval in milliseconds.\n         *\n         *  Since the tasks run on ticks instead of millisecond intervals; this\n         *  value operates as the base resolution for all tasks. If you are running\n         *  heavy tasks; lower interval requires higher CPU power.\n         *  @memberof TaskTimer\n         *  @type {Number}\n         */\n        get: function () {\n            return this._.options.interval;\n        },\n        set: function (value) {\n            this._.options.interval = value || DEFAULT_TIMER_OPTIONS.interval;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"stopOnCompleted\", {\n        /**\n         *  Gets or sets whether the timer should automatically stop when all tasks\n         *  are completed. For this to take affect, all added tasks should have\n         *  `totalRuns` and/or `stopDate` configured. This option can be set/changed\n         *  at any time.\n         *  @memberof TaskTimer\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.options.stopOnCompleted;\n        },\n        set: function (value) {\n            this._.options.stopOnCompleted = Boolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"state\", {\n        /**\n         *  Gets the current state of the timer.\n         *  For possible values, see `TaskTimer.State` enumeration.\n         *  @memberof TaskTimer\n         *  @type {TaskTimer.State}\n         *  @readonly\n         */\n        get: function () {\n            return this._.state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"time\", {\n        /**\n         *  Gets time information for the latest run of the timer.\n         *  `#time.started` indicates the start time of the timer.\n         *  `#time.stopped` indicates the stop time of the timer. (`0` if still running.)\n         *  `#time.elapsed` indicates the elapsed time of the timer.\n         *  @memberof TaskTimer\n         *  @type {ITimeInfo}\n         *  @readonly\n         */\n        get: function () {\n            var current = this.state !== TaskTimer.State.STOPPED ? Date.now() : this._.stopTime;\n            return Object.freeze({\n                started: this._.startTime,\n                stopped: this._.stopTime,\n                elapsed: current - this._.startTime\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"tickCount\", {\n        /**\n         *  Gets the current tick count for the latest run of the timer.\n         *  This value will be reset to `0` when the timer is stopped or reset.\n         *  @memberof TaskTimer\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.tickCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"taskCount\", {\n        /**\n         *  Gets the current task count. Tasks remain even after the timer is\n         *  stopped. But they will be removed if the timer is reset.\n         *  @memberof TaskTimer\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return Object.keys(this._.tasks).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"runCount\", {\n        /**\n         *  Gets the total number of all task executions (runs).\n         *  @memberof TaskTimer\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.runCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // ---------------------------\n    // PUBLIC (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  Gets the task with the given name.\n     *  @memberof TaskTimer\n     *\n     *  @param {String} name - Name of the task.\n     *\n     *  @returns {Task}\n     */\n    TaskTimer.prototype.get = function (name) {\n        return this._.tasks[name] || null;\n    };\n    /**\n     *  Adds a collection of new tasks for the timer.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {Task|ITaskOptions|TaskCallback|Array<any>} task - Either a\n     *  single task, task options object or the callback function; or a mixture\n     *  of these as an array.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task callback is not set or a task with the given\n     *  name already exists.\n     */\n    TaskTimer.prototype.add = function (task) {\n        var _this = this;\n        var list = _ensureArray(task);\n        (list || []).forEach(function (item) { return _this._add(item); });\n        return this;\n    };\n    /**\n     *  Removes the task by the given name.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {string|Task} task - Task to be removed. Either pass the\n     *  name or the task itself.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task with the given name does not exist.\n     */\n    TaskTimer.prototype.remove = function (task) {\n        var name = typeof task === 'string' ? task : task.name;\n        task = this.get(name);\n        if (!name || !task) {\n            throw new Error(\"No tasks exist with name '\" + name + \"'.\");\n        }\n        // first decrement completed tasks count if this is a completed task.\n        if (task.completed && this._.completedCount > 0)\n            this._.completedCount--;\n        this._.tasks[name] = null;\n        delete this._.tasks[name];\n        this._emit(TaskTimer.EventType.TASK_REMOVED, task);\n        return this;\n    };\n    /**\n     *  Starts the timer and puts the timer in `RUNNING` state. If it's already\n     *  running, this will reset the start/stop time and tick count, but will not\n     *  reset (or remove) existing tasks.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.start = function () {\n        this._stop();\n        this._.startTime = Date.now();\n        this._.stopTime = 0;\n        this._.tickCount = 0;\n        this._.runCount = 0;\n        this._run();\n        this._.state = TaskTimer.State.RUNNING;\n        this._emit(TaskTimer.EventType.STARTED);\n        return this;\n    };\n    /**\n     *  Pauses the timer, puts the timer in `PAUSED` state and all tasks on hold.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.pause = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.state = TaskTimer.State.PAUSED;\n        this._emit(TaskTimer.EventType.PAUSED);\n        return this;\n    };\n    /**\n     *  Resumes the timer and puts the timer in `RUNNING` state; if previuosly\n     *  paused. In this state, all existing tasks are resumed.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.resume = function () {\n        if (this.state !== TaskTimer.State.PAUSED)\n            return this;\n        this._run();\n        this._.state = TaskTimer.State.RUNNING;\n        this._emit(TaskTimer.EventType.RESUMED);\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `STOPPED` state. In this state, all\n     *  existing tasks are stopped and no values or tasks are reset until\n     *  re-started or explicitly calling reset.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.stop = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.stopTime = Date.now();\n        this._.state = TaskTimer.State.STOPPED;\n        this._emit(TaskTimer.EventType.STOPPED);\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `IDLE` state.\n     *  This will reset the ticks and removes all tasks silently; meaning no\n     *  other events will be emitted such as `\"taskRemoved\"`.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.reset = function () {\n        this._reset();\n        this._emit(TaskTimer.EventType.RESET);\n        return this;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  @private\n     */\n    TaskTimer.prototype._emit = function (type, data) {\n        var event = {\n            type: type,\n            source: this,\n            data: data\n        };\n        return this.emit(type, event);\n    };\n    /**\n     *  Adds a new task for the timer.\n     *  @private\n     *\n     *  @param {Task|ITaskOptions|TaskCallback} options - Either a task instance,\n     *  task options object or the callback function to be executed on tick\n     *  intervals.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If the task callback is not set or a task with the\n     *  given name already exists.\n     */\n    TaskTimer.prototype._add = function (options) {\n        if (typeof options === 'function') {\n            options = {\n                callback: options\n            };\n        }\n        if (_type(options) === 'object' && !options.name) {\n            options.name = this._getNewTaskName();\n        }\n        if (this.get(options.name)) {\n            throw new Error(\"A task with name '\" + options.name + \"' already exists.\");\n        }\n        var task = options instanceof _1.Task ? options : new _1.Task(options);\n        this._.tasks[task.name] = task;\n        this._emit(TaskTimer.EventType.TASK_ADDED, task);\n        return this;\n    };\n    /**\n     *  Stops the timer.\n     *  @private\n     */\n    TaskTimer.prototype._stop = function () {\n        if (this._timer) {\n            clearInterval(this._timer);\n            this._timer = null;\n        }\n    };\n    /**\n     *  Resets the timer.\n     *  @private\n     */\n    TaskTimer.prototype._reset = function () {\n        this._stop();\n        this._ = {\n            options: (this._ || {}).options,\n            state: TaskTimer.State.IDLE,\n            tasks: {},\n            tickCount: 0,\n            runCount: 0,\n            startTime: 0,\n            stopTime: 0,\n            completedCount: 0\n        };\n    };\n    /**\n     *  Handler to be executed on each tick.\n     *  @private\n     */\n    TaskTimer.prototype._tick = function () {\n        var _this = this;\n        var name;\n        var task;\n        var tasks = this._.tasks;\n        this._.tickCount += 1;\n        for (name in tasks) {\n            task = tasks[name];\n            if (!task)\n                continue;\n            if (this.tickCount % task.tickInterval === 0) {\n                // below will not execute if task is disabled or already\n                // completed.\n                task._run(function () {\n                    _this._.runCount += 1;\n                    _this._emit(TaskTimer.EventType.TASK, task);\n                    if (task.completed) {\n                        _this._.completedCount++;\n                        _this._emit(TaskTimer.EventType.TASK_COMPLETED, task);\n                        if (task.removeOnCompleted)\n                            _this.remove(task);\n                    }\n                    if (_this._.completedCount === _this.taskCount) {\n                        _this._emit(TaskTimer.EventType.COMPLETED);\n                        if (_this.stopOnCompleted)\n                            _this.stop();\n                    }\n                });\n            }\n        }\n        this._emit(TaskTimer.EventType.TICK);\n    };\n    /**\n     *  Runs the timer.\n     *  @private\n     */\n    TaskTimer.prototype._run = function () {\n        var _this = this;\n        this._timer = setInterval(function () {\n            _this._tick();\n            _this._.state = TaskTimer.State.RUNNING;\n        }, this._.options.interval);\n    };\n    /**\n     *  Gets a unique task name.\n     *  @private\n     */\n    TaskTimer.prototype._getNewTaskName = function () {\n        var num = this.taskCount;\n        var name;\n        while (!name || this.get(name)) {\n            num++;\n            name = 'task-' + num;\n        }\n        return name;\n    };\n    return TaskTimer;\n}(eventemitter3_1.EventEmitter));\nexports.TaskTimer = TaskTimer;\n// ---------------------------\n// NAMESPACE\n// ---------------------------\n// tslint:disable no-namespace\n(function (TaskTimer) {\n    /**\n     *  Represents the class that holds the configurations and the callback function\n     *  required to run a task.\n     *  @class\n     */\n    TaskTimer.Task = _1.Task;\n    /**\n     *  Enumerates `TaskTimer` states.\n     *  @enum {String}\n     *  @readonly\n     */\n    var State;\n    (function (State) {\n        /**\n         *  Indicates that the timer is in `idle` state.\n         *  This is the initial state when the `TaskTimer` instance is first created.\n         *  Also when an existing timer is reset, it will be `idle`.\n         *  @memberof TaskTimer.State\n         *  @type {Number}\n         */\n        State[\"IDLE\"] = \"idle\";\n        /**\n         *  Indicates that the timer is in `running` state; such as when the timer is\n         *  started or resumed.\n         *  @memberof TaskTimer.State\n         *  @type {Number}\n         */\n        State[\"RUNNING\"] = \"running\";\n        /**\n         *  Indicates that the timer is in `paused` state.\n         *  @memberof TaskTimer.State\n         *  @type {Number}\n         */\n        State[\"PAUSED\"] = \"paused\";\n        /**\n         *  Indicates that the timer is in `stopped` state.\n         *  @memberof TaskTimer.State\n         *  @type {Number}\n         */\n        State[\"STOPPED\"] = \"stopped\";\n    })(State = TaskTimer.State || (TaskTimer.State = {}));\n    /**\n     *  Enumerates the `TaskTimer` event types.\n     *  @enum {String}\n     *  @readonly\n     */\n    var EventType;\n    (function (EventType) {\n        /**\n         *  Emitted on each tick (interval) of `TaskTimer`.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TICK\"] = \"tick\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  started.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"STARTED\"] = \"started\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  resumed.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"RESUMED\"] = \"resumed\";\n        /**\n         *  Emitted when the timer is put in `PAUSED` state.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"PAUSED\"] = \"paused\";\n        /**\n         *  Emitted when the timer is put in `STOPPED` state.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"STOPPED\"] = \"stopped\";\n        /**\n         *  Emitted when the timer is reset.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"RESET\"] = \"reset\";\n        /**\n         *  Emitted when a task is executed.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TASK\"] = \"task\";\n        /**\n         *  Emitted when a task is added to `TaskTimer` instance.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TASK_ADDED\"] = \"taskAdded\";\n        /**\n         *  Emitted when a task is removed from `TaskTimer` instance.\n         *  Note that this will not be emitted when `.reset()` is called; which\n         *  removes all tasks silently.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TASK_REMOVED\"] = \"taskRemoved\";\n        /**\n         *  Emitted when a task has completed all of its executions (runs)\n         *  or reached its stopping date/time (if set). Note that this event\n         *  will only be fired if the tasks has a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"TASK_COMPLETED\"] = \"taskCompleted\";\n        /**\n         *  Emitted when all tasks have completed all of their executions (runs)\n         *  or reached their stopping date/time (if set). Note that this event\n         *  will only be fired if all tasks have a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @memberof TaskTimer.Event\n         *  @type {String}\n         */\n        EventType[\"COMPLETED\"] = \"completed\";\n    })(EventType = TaskTimer.EventType || (TaskTimer.EventType = {}));\n})(TaskTimer || (TaskTimer = {}));\nexports.TaskTimer = TaskTimer;\n// ---------------------------\n// HELPER METHODS\n// ---------------------------\n/**\n *  @private\n */\nfunction _ensureArray(o) {\n    return o\n        ? !Array.isArray(o) ? [o] : o\n        : [];\n}\n/**\n *  @private\n */\nfunction _type(o) {\n    return Object.prototype.toString.call(o).match(/\\s(\\w+)/i)[1].toLowerCase();\n}\n// ---------------------------\n// ADDITIONAL DOCUMENTATION\n// ---------------------------\n/**\n *  Adds the listener function to the end of the listeners array for the event\n *  named `eventName`. No checks are made to see if the listener has already\n *  been added. Multiple calls passing the same combination of eventName and\n *  listener will result in the listener being added, and called, multiple times.\n *  @name TaskTimer#on\n *  @function\n *  @alias TaskTimer#addListener\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Adds a one time listener function for the event named `eventName`. The next\n *  time eventName is triggered, this listener is removed and then invoked.\n *  @name TaskTimer#once\n *  @function\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Removes the specified `listener` from the listener array for the event\n *  named `eventName`.\n *  @name TaskTimer#off\n *  @function\n *  @alias TaskTimer#removeListener\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be removed.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Removes all listeners, or those of the specified eventName.\n *  @name TaskTimer#removeAllListeners\n *  @function\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be removed.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n"],"sourceRoot":""}