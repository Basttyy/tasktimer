{"version":3,"sources":["webpack://tasktimer/webpack/universalModuleDefinition","webpack://tasktimer/webpack/bootstrap","webpack://tasktimer/./src/index.ts","webpack://tasktimer/./src/utils.ts","webpack://tasktimer/./src/Task.ts","webpack://tasktimer/./src/TaskTimer.ts","webpack://tasktimer/./node_modules/eventemitter3/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","proto","NODE","setImmediate","process","hrtime","utils","BROWSER","type","toString","match","toLowerCase","isset","ensureArray","Array","isArray","getNumber","minimum","defaultValue","getBool","cb","args","_i","arguments","length","setTimeout","apply","concat","clearImmediate","id","clearTimeout","isPromise","then","__assign","assign","_1","utils_1","DEFAULT_TASK_OPTIONS","freeze","enabled","tickDelay","tickInterval","totalRuns","startDate","stopDate","immediate","removeOnCompleted","callback","Task","options","_init","_","configurable","set","currentRuns","started","timeOnFirstRun","stopped","timeOnLastRun","elapsed","_markedCompleted","Boolean","Date","now","tickCount","Math","ceil","Number","_timer","interval","timeToRun","onInterval","reset","Error","toJSON","obj","_setTimer","timer","_emit","event","source","error","data","emit","_done","completed","_taskCompleted","_execCallback","_this","catch","err","TaskTimer","Event","TASK_ERROR","_run","onRun","String","extendStatics","__extends","b","setPrototypeOf","__proto__","__","constructor","State","eventemitter3_1","DEFAULT_TIMER_OPTIONS","precision","stopOnCompleted","_super","_timeoutRef","_immediateRef","_runCount","_reset","opts","state","current","STOPPED","stopTime","startTime","keys","tasks","taskRunCount","add","task","forEach","item","_add","remove","completedTaskCount","TASK_REMOVED","start","_stop","RUNNING","_markTime","STARTED","pause","PAUSED","resume","IDLE","RESUMED","stop","RESET","_getUniqueTaskID","TASK_ADDED","tickCountAfterResume","resumeTime","hrResumeTime","TASK_COMPLETED","taskCount","COMPLETED","_tick","TICK","canRunOnTick","TASK","_getTimeDiff","hrDiff","diff","floor","num","EventEmitter","has","prefix","Events","EE","fn","context","once","addListener","emitter","TypeError","listener","evt","_events","push","_eventsCount","clearEvent","eventNames","events","names","slice","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a1","a2","a3","a4","a5","len","removeListener","undefined","j","on","removeAllListeners","off","prefixed"],"mappings":"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","file":"tasktimer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tasktimer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tasktimer\"] = factory();\n\telse\n\t\troot[\"tasktimer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"lib/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Task\"));\n__export(require(\"./TaskTimer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proto = Object.prototype;\nvar NODE = typeof setImmediate === 'function'\n    && typeof process === 'object'\n    && typeof process.hrtime === 'function';\nvar BROWSER = !NODE;\n/** @private */\nvar utils = {\n    NODE: NODE,\n    BROWSER: BROWSER,\n    type: function (o) {\n        return proto.toString.call(o).match(/\\s(\\w+)/i)[1].toLowerCase();\n    },\n    isset: function (o) {\n        return o !== null && o !== undefined;\n    },\n    ensureArray: function (o) {\n        return utils.isset(o)\n            ? !Array.isArray(o) ? [o] : o\n            : [];\n    },\n    getNumber: function (value, minimum, defaultValue) {\n        return typeof value === 'number'\n            ? (value < minimum ? minimum : value)\n            : defaultValue;\n    },\n    getBool: function (value, defaultValue) {\n        return typeof value !== 'boolean'\n            ? defaultValue\n            : value;\n    },\n    setImmediate: function (cb) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        /* istanbul ignore if */\n        if (utils.BROWSER) { // tested separately\n            return setTimeout(cb.apply(null, args), 0);\n        }\n        return setImmediate.apply(void 0, [cb].concat(args));\n    },\n    clearImmediate: function (id) {\n        /* istanbul ignore next */\n        if (!id)\n            return;\n        /* istanbul ignore if */\n        if (utils.BROWSER)\n            return clearTimeout(id); // tested separately\n        clearImmediate(id);\n    },\n    /**\n     *  Checks whether the given value is a promise.\n     *  @private\n     *  @param {any} value - Value to be checked.\n     *  @return {boolean}\n     */\n    isPromise: function (value) {\n        return value\n            && utils.type(value) === 'promise'\n            && typeof value.then === 'function';\n    }\n};\nexports.utils = utils;\n","\"use strict\";\n/* tslint:disable:no-empty */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\".\");\nvar utils_1 = require(\"./utils\");\n/**\n *  @private\n */\nvar DEFAULT_TASK_OPTIONS = Object.freeze({\n    enabled: true,\n    tickDelay: 0,\n    tickInterval: 1,\n    totalRuns: null,\n    startDate: null,\n    stopDate: null,\n    immediate: false,\n    removeOnCompleted: false,\n    callback: null\n});\n/**\n *  Represents the class that holds the configurations and the callback function\n *  required to run a task.\n *  @class\n */\nvar Task = /** @class */ (function () {\n    /**\n     *  Initializes a new instance of `Task` class.\n     *  @constructor\n     *  @param {ITaskOptions} options Task options.\n     */\n    function Task(options) {\n        this._init(options);\n    }\n    Object.defineProperty(Task.prototype, \"id\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) MEMBERS\n        // ---------------------------\n        /**\n         *  Gets the unique ID of the task.\n         *  @name Task#id\n         *  @type {string}\n         *  @readonly\n         */\n        get: function () {\n            return this._.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"enabled\", {\n        /**\n         *  Specifies whether this task is currently enabled. This essentially gives\n         *  you a manual control over execution. The task will always bypass the\n         *  callback while this is set to `false`.\n         *  @name Task#enabled\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.enabled;\n        },\n        set: function (value) {\n            this._.enabled = utils_1.utils.getBool(value, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickDelay\", {\n        /**\n         *  Gets or sets the number of ticks to allow before running the task for\n         *  the first time.\n         *  @name Task#tickDelay\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickDelay;\n        },\n        set: function (value) {\n            this._.tickDelay = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.tickDelay);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickInterval\", {\n        /**\n         *  Gets or sets the tick interval that the task should be run on. The unit\n         *  is \"ticks\" (not milliseconds). For instance, if the timer interval is\n         *  `1000` milliseconds, and we add a task with `5` tick intervals. The task\n         *  will run on every `5` <b>seconds</b>.\n         *  @name Task#tickInterval\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickInterval;\n        },\n        set: function (value) {\n            this._.tickInterval = utils_1.utils.getNumber(value, 1, DEFAULT_TASK_OPTIONS.tickInterval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"totalRuns\", {\n        /**\n         *  Gets or sets the total number of times the task should be run. `0` or\n         *  `null` means unlimited (until the timer has stopped).\n         *  @name Task#totalRuns\n         *  @type {number}\n         */\n        get: function () {\n            return this._.totalRuns;\n        },\n        set: function (value) {\n            this._.totalRuns = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.totalRuns);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"immediate\", {\n        /**\n         *  Specifies whether to wrap callback in a `setImmediate()` call before\n         *  executing. This can be useful if the task is not doing any I/O or using\n         *  any JS timers but synchronously blocking the event loop.\n         *  @name Task#immediate\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.immediate;\n        },\n        set: function (value) {\n            this._.immediate = utils_1.utils.getBool(value, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"currentRuns\", {\n        /**\n         *  Gets the number of times, this task has been run.\n         *  @name Task#currentRuns\n         *  @type {number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.currentRuns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"time\", {\n        /**\n         *  Gets time information for the lifetime of a task.\n         *  `#time.started` indicates the first execution time of a task.\n         *  `#time.stopped` indicates the last execution time of a task. (`0` if still running.)\n         *  `#time.elapsed` indicates the total lifetime of a task.\n         *  @name Task#time\n         *  @type {ITimeInfo}\n         *  @readonly\n         */\n        get: function () {\n            var started = this._.timeOnFirstRun || 0;\n            var stopped = this._.timeOnLastRun || 0;\n            return Object.freeze({\n                started: started,\n                stopped: stopped,\n                elapsed: stopped - started\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"callback\", {\n        /**\n         *  Gets the callback function to be executed on each run.\n         *  @name Task#callback\n         *  @type {TaskCallback}\n         *  @readonly\n         */\n        get: function () {\n            return this._.callback;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"removeOnCompleted\", {\n        /**\n         *  Gets or sets whether to remove the task (to free up memory) when task\n         *  has completed its executions (runs). For this to take affect, the task\n         *  should have `totalRuns` and/or `stopDate` configured.\n         *  @name Task#removeOnCompleted\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.removeOnCompleted;\n        },\n        set: function (value) {\n            this._.removeOnCompleted = utils_1.utils.getBool(value, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"completed\", {\n        /**\n         *  Specifies whether the task has completed all runs (executions) or\n         *  `stopDate` is reached. Note that if both `totalRuns` and `stopDate` are\n         *  omitted, this will never return `true`; since the task has no execution\n         *  limit set.\n         *  @name Task#completed\n         *  @type {boolean}\n         *  @readonly\n         */\n        get: function () {\n            // return faster if already completed\n            if (this._markedCompleted)\n                return true;\n            return Boolean((this.totalRuns && this.currentRuns >= this.totalRuns)\n                || (this._.stopDate && Date.now() >= this._.stopDate));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"canRunOnTick\", {\n        /**\n         *  Specifies whether the task can run on the current tick of the timer.\n         *  @private\n         *  @name Task#canRunOnTick\n         *  @type {boolean}\n         *  @readonly\n         */\n        get: function () {\n            if (this._markedCompleted)\n                return false;\n            var tickCount = this._.startDate\n                ? Math.ceil((Date.now() - Number(this._.startDate)) / this._timer.interval)\n                : this._timer.tickCount;\n            var timeToRun = !this._.startDate || Date.now() >= this._.startDate;\n            var onInterval = tickCount > this.tickDelay && (tickCount - this.tickDelay) % this.tickInterval === 0;\n            return Boolean(timeToRun && onInterval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Resets the current number of runs. This will keep the task running for\n     *  the same amount of `tickIntervals` initially configured.\n     *  @memberof Task\n     *  @chainable\n     *\n     *  @param {ITaskBaseOptions} [options] If set, this will also re-configure the task.\n     *\n     *  @returns {Task}\n     */\n    Task.prototype.reset = function (options) {\n        this._.currentRuns = 0;\n        if (options) {\n            var id = options.id;\n            if (id && id !== this.id)\n                throw new Error('Cannot change ID of a task.');\n            options.id = this.id;\n            this._init(options);\n        }\n        return this;\n    };\n    /**\n     *  Serialization to JSON.\n     *\n     *  Never return string From `toJSON()`. It should return an object.\n     *  @private\n     */\n    Task.prototype.toJSON = function () {\n        var obj = __assign({}, this._);\n        delete obj.callback;\n        return obj;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) MEMBERS\n    // ---------------------------\n    /**\n     *  Set reference to timer itself.\n     *  Only called by `TaskTimer`.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    Task.prototype._setTimer = function (timer) {\n        this._timer = timer;\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._emit = function (name, object) {\n        var event = {\n            name: name,\n            source: this\n        };\n        /* istanbul ignore else */\n        if (object instanceof Error) {\n            event.error = object;\n        }\n        else {\n            event.data = object;\n        }\n        this._timer.emit(name, event);\n    };\n    /**\n     *  `TaskTimer` should be informed if this task is completed. But execution\n     *  should be finished. So we do this within the `done()` function.\n     *  @private\n     */\n    Task.prototype._done = function () {\n        if (this.completed) {\n            this._markedCompleted = true;\n            this._.timeOnLastRun = Date.now();\n            this._timer._taskCompleted(this);\n        }\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._execCallback = function () {\n        var _this = this;\n        try {\n            var o = this.callback.apply(this, [this, function () { return _this._done(); }]);\n            if (this.callback.length >= 2) {\n                // handled by done() (called within the task callback by the user)\n            }\n            else if (utils_1.utils.isPromise(o)) {\n                o.then(function () {\n                    _this._done();\n                })\n                    .catch(function (err) {\n                    _this._emit(_1.TaskTimer.Event.TASK_ERROR, err);\n                });\n            }\n            else {\n                this._done();\n            }\n        }\n        catch (err) {\n            this._emit(_1.TaskTimer.Event.TASK_ERROR, err);\n        }\n    };\n    /**\n     *  Only used by `TaskTimer`.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    Task.prototype._run = function (onRun) {\n        var _this = this;\n        if (!this.enabled || this._markedCompleted)\n            return;\n        if (this.currentRuns === 0)\n            this._.timeOnFirstRun = Date.now();\n        // current runs should be set before execution or it might flow if some\n        // async runs finishes faster and some other slower.\n        this._.currentRuns++;\n        onRun();\n        if (this.immediate) {\n            utils_1.utils.setImmediate(function () { return _this._execCallback(); });\n        }\n        else {\n            this._execCallback();\n        }\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._init = function (options) {\n        if (!options || !options.id) {\n            throw new Error('A unique task ID is required.');\n        }\n        if (typeof options.callback !== 'function') {\n            throw new Error('A callback function is required for a task to run.');\n        }\n        var startDate = options.startDate, stopDate = options.stopDate;\n        if (startDate && stopDate && startDate >= stopDate) {\n            throw new Error('Task start date cannot be the same or after stop date.');\n        }\n        this._markedCompleted = false;\n        this._ = __assign({ currentRuns: 0 }, DEFAULT_TASK_OPTIONS);\n        this._.id = String(options.id);\n        this._.callback = options.callback;\n        this._.startDate = options.startDate || null;\n        this._.stopDate = options.stopDate || null;\n        // using setters for validation & default values\n        this.enabled = options.enabled;\n        this.tickDelay = options.tickDelay;\n        this.tickInterval = options.tickInterval;\n        this.totalRuns = options.totalRuns;\n        this.immediate = options.immediate;\n        this.removeOnCompleted = options.removeOnCompleted;\n    };\n    return Task;\n}());\nexports.Task = Task;\n","\"use strict\";\n/* tslint:disable:max-file-line-count */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// dep modules\nvar eventemitter3_1 = require(\"eventemitter3\");\n// own modules\nvar _1 = require(\".\");\nvar utils_1 = require(\"./utils\");\n/**\n *  @private\n */\nvar DEFAULT_TIMER_OPTIONS = Object.freeze({\n    interval: 1000,\n    precision: true,\n    stopOnCompleted: false\n});\n/**\n *  TaskTimer • https://github.com/onury/tasktimer\n *  @license MIT\n *  @copyright 2019, Onur Yıldırım <onur@cutepilot.com>\n */\n// ---------------------------\n// EventEmitter Docs\n// ---------------------------\n/**\n *  Calls each of the listeners registered for a given event name.\n *  @name TaskTimer#emit\n *  @function\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be emitted.\n *  @param {any} [data] - Data to be passed to event listeners.\n *\n *  @returns {Boolean} - `true` if the event had listeners, else `false`.\n */\n/**\n *  Return an array listing the events for which the emitter has registered\n *  listeners.\n *  @name TaskTimer#eventNames\n *  @function\n *\n *  @returns {Array} - List of event names.\n */\n/**\n *  Adds the listener function to the end of the listeners array for the event\n *  named `eventName`. No checks are made to see if the listener has already\n *  been added. Multiple calls passing the same combination of `eventName` and\n *  `listener` will result in the listener being added, and called, multiple\n *  times.\n *  @name TaskTimer#on\n *  @function\n *  @alias TaskTimer#addListener\n *  @chainable\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *  @param {*} [context=this] - The context to invoke the listener with.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n *\n *  @example\n *  const timer = new TaskTimer(1000);\n *  // add a listener to be invoked when timer has stopped.\n *  timer.on(TaskTimer.Event.STOPPED, () => {\n *      console.log('Timer has stopped!');\n *  });\n *  timer.start();\n */\n/**\n *  Adds a one time listener function for the event named `eventName`. The next\n *  time `eventName` is triggered, this `listener` is removed and then invoked.\n *  @name TaskTimer#once\n *  @function\n *  @chainable\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *  @param {*} [context=this] - The context to invoke the listener with.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Removes the specified `listener` from the listener array for the event\n *  named `eventName`.\n *  @name TaskTimer#off\n *  @function\n *  @alias TaskTimer#removeListener\n *  @chainable\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be removed.\n *  @param {Function} listener - The callback function to be invoked per event.\n *  @param {*} [context=this] - Only remove the listeners that have this context.\n *  @param {Boolean} [once=false] - Only remove one-time listeners.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Gets the number of listeners listening to a given event.\n *  @name TaskTimer#listenerCount\n *  @function\n *\n *  @param {TaskTimer.Event} eventName - The name of the event.\n *\n *  @returns {Number} - The number of listeners.\n */\n/**\n *  Gets the listeners registered for a given event.\n *  @name TaskTimer#listeners\n *  @function\n *\n *  @param {TaskTimer.Event} eventName - The name of the event.\n *\n *  @returns {Array} - The registered listeners.\n */\n/**\n *  Removes all listeners, or those of the specified `eventName`.\n *  @name TaskTimer#removeAllListeners\n *  @function\n *  @chainable\n *\n *  @param {TaskTimer.Event} [eventName] - The name of the event to be removed.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  A timer utility for running periodic tasks on the given interval ticks. This\n *  is useful when you want to run or schedule multiple tasks on a single timer\n *  instance.\n *\n *  This class extends `EventEmitter3` which is an `EventEmitter` implementation\n *  for both Node and browser. For detailed information, refer to Node.js\n *  documentation.\n *  @class\n *  @global\n *\n *  @extends EventEmitter\n *\n *  @see\n *  {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n */\nvar TaskTimer = /** @class */ (function (_super) {\n    __extends(TaskTimer, _super);\n    // ---------------------------\n    // CONSTRUCTOR\n    // ---------------------------\n    /**\n     *  Constructs a new `TaskTimer` instance with the given time interval (in\n     *  milliseconds).\n     *  @constructor\n     *\n     *  @param {ITaskTimerOptions|number} [options] - Either TaskTimer options\n     *  or a base interval (in milliseconds). Since the tasks run on ticks\n     *  instead of millisecond intervals; this value operates as the base\n     *  resolution for all tasks. If you are running heavy tasks, lower interval\n     *  requires higher CPU power. This value can be updated any time by setting\n     *  the `interval` property on the instance.\n     *\n     *  @example\n     *  const timer = new TaskTimer(1000); // milliseconds\n     *  // Execute some code on each tick...\n     *  timer.on('tick', () => {\n     *      console.log('tick count: ' + timer.tickCount);\n     *      console.log('elapsed time: ' + timer.time.elapsed + ' ms.');\n     *  });\n     *  // add a task named 'heartbeat' that runs every 5 ticks and a total of 10 times.\n     *  const task1 = {\n     *      id: 'heartbeat',\n     *      tickDelay: 20,   // ticks (to wait before first run)\n     *      tickInterval: 5, // ticks (interval)\n     *      totalRuns: 10,   // times to run\n     *      callback(task) {\n     *          console.log(task.id + ' task has run ' + task.currentRuns + ' times.');\n     *      }\n     *  };\n     *  timer.add(task1).start();\n     */\n    function TaskTimer(options) {\n        var _this = _super.call(this) || this;\n        _this._timeoutRef = null;\n        _this._immediateRef = null;\n        _this._runCount = 0;\n        _this._reset();\n        _this._.opts = {};\n        var opts = typeof options === 'number'\n            ? { interval: options }\n            : options || {};\n        _this.interval = opts.interval;\n        _this.precision = opts.precision;\n        _this.stopOnCompleted = opts.stopOnCompleted;\n        return _this;\n    }\n    Object.defineProperty(TaskTimer.prototype, \"interval\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) PROPERTIES\n        // ---------------------------\n        /**\n         *  Gets or sets the base timer interval in milliseconds.\n         *\n         *  Since the tasks run on ticks instead of millisecond intervals; this\n         *  value operates as the base resolution for all tasks. If you are running\n         *  heavy tasks, lower interval requires higher CPU power. This value can be\n         *  updated any time.\n         *\n         *  @name TaskTimer#interval\n         *  @type {number}\n         */\n        get: function () {\n            return this._.opts.interval;\n        },\n        set: function (value) {\n            this._.opts.interval = utils_1.utils.getNumber(value, 20, DEFAULT_TIMER_OPTIONS.interval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"precision\", {\n        /**\n         *  Gets or sets whether timer precision enabled.\n         *\n         *  Because of the single-threaded, asynchronous nature of JavaScript, each\n         *  execution takes a piece of CPU time, and the time they have to wait will\n         *  vary, depending on the load. This creates a latency and cumulative\n         *  difference in asynchronous timers; that gradually increase the\n         *  inacuraccy. `TaskTimer` overcomes this problem as much as possible:\n         *\n         *  <li>The delay between each tick is auto-adjusted when it's off\n         *  due to task/CPU loads or clock drifts.</li>\n         *  <li>In Node.js, `TaskTimer` also makes use of `process.hrtime()`\n         *  high-resolution real-time. The time is relative to an arbitrary\n         *  time in the past (not related to the time of day) and therefore not\n         *  subject to clock drifts.</li>\n         *  <li>The timer may hit a synchronous / blocking task; or detect significant\n         *  time drift (longer than the base interval) due to JS event queue, which\n         *  cannot be recovered by simply adjusting the next delay. In this case, right\n         *  from the next tick onward; it will auto-recover as much as possible by\n         *  running \"immediate\" tasks until it reaches the proper time vs tick/run\n         *  balance.</li>\n         *\n         *  <blockquote><i>Note that precision will be as high as possible but it still\n         *  can be off by a few milliseconds; depending on the CPU or the load.</i>\n         *  </blockquote>\n         *  @name TaskTimer#precision\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.opts.precision;\n        },\n        set: function (value) {\n            this._.opts.precision = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.precision);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"stopOnCompleted\", {\n        /**\n         *  Gets or sets whether the timer should automatically stop when all tasks\n         *  are completed. For this to take affect, all added tasks should have\n         *  `totalRuns` and/or `stopDate` configured. This option can be set/changed\n         *  at any time.\n         *  @name TaskTimer#stopOnCompleted\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.opts.stopOnCompleted;\n        },\n        set: function (value) {\n            this._.opts.stopOnCompleted = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.stopOnCompleted);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"state\", {\n        /**\n         *  Gets the current state of the timer.\n         *  For possible values, see `TaskTimer.State` enumeration.\n         *  @name TaskTimer#state\n         *  @type {TaskTimer.State}\n         *  @readonly\n         */\n        get: function () {\n            return this._.state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"time\", {\n        /**\n         *  Gets time information for the latest run of the timer.\n         *  `#time.started` indicates the start time of the timer.\n         *  `#time.stopped` indicates the stop time of the timer. (`0` if still running.)\n         *  `#time.elapsed` indicates the elapsed time of the timer.\n         *  @name TaskTimer#time\n         *  @type {ITimeInfo}\n         *  @readonly\n         */\n        get: function () {\n            var current = this.state !== TaskTimer.State.STOPPED ? Date.now() : this._.stopTime;\n            return Object.freeze({\n                started: this._.startTime,\n                stopped: this._.stopTime,\n                elapsed: current - this._.startTime\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"tickCount\", {\n        /**\n         *  Gets the current tick count for the latest run of the timer.\n         *  This value will be reset to `0` when the timer is stopped or reset.\n         *  @name TaskTimer#tickCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.tickCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"taskCount\", {\n        /**\n         *  Gets the current task count. Tasks remain even after the timer is\n         *  stopped. But they will be removed if the timer is reset.\n         *  @name TaskTimer#taskCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return Object.keys(this._.tasks).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"taskRunCount\", {\n        /**\n         *  Gets the total number of all task executions (runs).\n         *  @name TaskTimer#taskRunCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.taskRunCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"runCount\", {\n        /**\n         *  Gets the total number of timer runs, including resumed runs.\n         *  @name TaskTimer#runCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._runCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // ---------------------------\n    // PUBLIC (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  Gets the task with the given ID.\n     *  @memberof TaskTimer\n     *\n     *  @param {String} id - ID of the task.\n     *\n     *  @returns {Task}\n     */\n    TaskTimer.prototype.get = function (id) {\n        return this._.tasks[id] || null;\n    };\n    /**\n     *  Adds a collection of new tasks for the timer.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {Task|ITaskOptions|TaskCallback|Array} task - Either a\n     *  single task, task options object or the callback function; or a mixture\n     *  of these as an array.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task callback is not set or a task with the given\n     *  name already exists.\n     */\n    TaskTimer.prototype.add = function (task) {\n        var _this = this;\n        if (!utils_1.utils.isset(task)) {\n            throw new Error('Either a task, task options or a callback is required.');\n        }\n        utils_1.utils.ensureArray(task).forEach(function (item) { return _this._add(item); });\n        return this;\n    };\n    /**\n     *  Removes the task by the given name.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {string|Task} task - Task to be removed. Either pass the\n     *  name or the task itself.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task with the given name does not exist.\n     */\n    TaskTimer.prototype.remove = function (task) {\n        var id = typeof task === 'string' ? task : task.id;\n        task = this.get(id);\n        if (!id || !task) {\n            throw new Error(\"No tasks exist with ID: '\" + id + \"'.\");\n        }\n        // first decrement completed tasks count if this is a completed task.\n        if (task.completed && this._.completedTaskCount > 0)\n            this._.completedTaskCount--;\n        this._.tasks[id] = null;\n        delete this._.tasks[id];\n        this._emit(TaskTimer.Event.TASK_REMOVED, task);\n        return this;\n    };\n    /**\n     *  Starts the timer and puts the timer in `RUNNING` state. If it's already\n     *  running, this will reset the start/stop time and tick count, but will not\n     *  reset (or remove) existing tasks.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.start = function () {\n        this._stop();\n        this._.state = TaskTimer.State.RUNNING;\n        this._runCount++;\n        this._.tickCount = 0;\n        this._.taskRunCount = 0;\n        this._.stopTime = 0;\n        this._markTime();\n        this._.startTime = Date.now();\n        this._emit(TaskTimer.Event.STARTED);\n        this._run();\n        return this;\n    };\n    /**\n     *  Pauses the timer, puts the timer in `PAUSED` state and all tasks on hold.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.pause = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.state = TaskTimer.State.PAUSED;\n        this._emit(TaskTimer.Event.PAUSED);\n        return this;\n    };\n    /**\n     *  Resumes the timer and puts the timer in `RUNNING` state; if previuosly\n     *  paused. In this state, all existing tasks are resumed.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.resume = function () {\n        if (this.state === TaskTimer.State.IDLE) {\n            this.start();\n            return this;\n        }\n        if (this.state !== TaskTimer.State.PAUSED)\n            return this;\n        this._runCount++;\n        this._markTime();\n        this._.state = TaskTimer.State.RUNNING;\n        this._emit(TaskTimer.Event.RESUMED);\n        this._run();\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `STOPPED` state. In this state, all\n     *  existing tasks are stopped and no values or tasks are reset until\n     *  re-started or explicitly calling reset.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.stop = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.stopTime = Date.now();\n        this._.state = TaskTimer.State.STOPPED;\n        this._emit(TaskTimer.Event.STOPPED);\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `IDLE` state.\n     *  This will reset the ticks and removes all tasks silently; meaning no\n     *  other events will be emitted such as `\"taskRemoved\"`.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.reset = function () {\n        this._reset();\n        this._emit(TaskTimer.Event.RESET);\n        return this;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  @private\n     */\n    TaskTimer.prototype._emit = function (type, data) {\n        var event = {\n            name: type,\n            source: this,\n            data: data\n        };\n        return this.emit(type, event);\n    };\n    /**\n     *  Adds a new task for the timer.\n     *  @private\n     *\n     *  @param {Task|ITaskOptions|TaskCallback} options - Either a task instance,\n     *  task options object or the callback function to be executed on tick\n     *  intervals.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If the task callback is not set or a task with the\n     *  given name already exists.\n     */\n    TaskTimer.prototype._add = function (options) {\n        if (typeof options === 'function') {\n            options = {\n                callback: options\n            };\n        }\n        if (utils_1.utils.type(options) === 'object' && !options.id) {\n            options.id = this._getUniqueTaskID();\n        }\n        if (this.get(options.id)) {\n            throw new Error(\"A task with id '\" + options.id + \"' already exists.\");\n        }\n        var task = options instanceof _1.Task ? options : new _1.Task(options);\n        task._setTimer(this);\n        this._.tasks[task.id] = task;\n        this._emit(TaskTimer.Event.TASK_ADDED, task);\n        return this;\n    };\n    /**\n     *  Stops the timer.\n     *  @private\n     */\n    TaskTimer.prototype._stop = function () {\n        this._.tickCountAfterResume = 0;\n        if (this._timeoutRef) {\n            clearTimeout(this._timeoutRef);\n            this._timeoutRef = null;\n        }\n        if (this._immediateRef) {\n            utils_1.utils.clearImmediate(this._immediateRef);\n            this._immediateRef = null;\n        }\n    };\n    /**\n     *  Resets the timer.\n     *  @private\n     */\n    TaskTimer.prototype._reset = function () {\n        this._ = {\n            opts: (this._ || {}).opts,\n            state: TaskTimer.State.IDLE,\n            tasks: {},\n            tickCount: 0,\n            taskRunCount: 0,\n            startTime: 0,\n            stopTime: 0,\n            completedTaskCount: 0,\n            resumeTime: 0,\n            hrResumeTime: null,\n            tickCountAfterResume: 0\n        };\n        this._stop();\n    };\n    /**\n     *  Called (by Task instance) when it has completed all of its runs.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    TaskTimer.prototype._taskCompleted = function (task) {\n        this._.completedTaskCount++;\n        this._emit(TaskTimer.Event.TASK_COMPLETED, task);\n        if (this._.completedTaskCount === this.taskCount) {\n            this._emit(TaskTimer.Event.COMPLETED);\n            if (this.stopOnCompleted)\n                this.stop();\n        }\n        if (task.removeOnCompleted)\n            this.remove(task);\n    };\n    /**\n     *  Handler to be executed on each tick.\n     *  @private\n     */\n    TaskTimer.prototype._tick = function () {\n        var _this = this;\n        this._.state = TaskTimer.State.RUNNING;\n        var id;\n        var task;\n        var tasks = this._.tasks;\n        this._.tickCount++;\n        this._.tickCountAfterResume++;\n        this._emit(TaskTimer.Event.TICK);\n        // tslint:disable:forin\n        for (id in tasks) {\n            task = tasks[id];\n            if (!task || !task.canRunOnTick)\n                continue;\n            // below will not execute if task is disabled or already\n            // completed.\n            task._run(function () {\n                _this._.taskRunCount++;\n                _this._emit(TaskTimer.Event.TASK, task);\n            });\n        }\n        this._run();\n    };\n    /**\n     *  Marks the resume (or start) time in milliseconds or high-resolution time\n     *  if available.\n     *  @private\n     */\n    TaskTimer.prototype._markTime = function () {\n        /* istanbul ignore if */\n        if (utils_1.utils.BROWSER) { // tested separately\n            this._.resumeTime = Date.now();\n        }\n        else {\n            this._.hrResumeTime = process.hrtime();\n        }\n    };\n    /**\n     *  Gets the time difference in milliseconds sinct the last resume or start\n     *  time.\n     *  @private\n     */\n    TaskTimer.prototype._getTimeDiff = function () {\n        // Date.now() is ~2x faster than Date#getTime()\n        /* istanbul ignore if */\n        if (utils_1.utils.BROWSER)\n            return Date.now() - this._.resumeTime; // tested separately\n        var hrDiff = process.hrtime(this._.hrResumeTime);\n        return Math.ceil((hrDiff[0] * 1000) + (hrDiff[1] / 1e6));\n    };\n    /**\n     *  Runs the timer.\n     *  @private\n     */\n    TaskTimer.prototype._run = function () {\n        var _this = this;\n        if (this.state !== TaskTimer.State.RUNNING)\n            return;\n        var interval = this.interval;\n        // we'll get a precise interval by checking if our clock is already\n        // drifted.\n        if (this.precision) {\n            var diff = this._getTimeDiff();\n            // did we reach this expected tick count for the given time period?\n            // calculated count should not be greater than tickCountAfterResume\n            if (Math.floor(diff / interval) > this._.tickCountAfterResume) {\n                // if we're really late, run immediately!\n                this._immediateRef = utils_1.utils.setImmediate(function () { return _this._tick(); });\n                return;\n            }\n            // if we still have time but a bit off, update next interval.\n            interval = interval - (diff % interval);\n        }\n        this._timeoutRef = setTimeout(function () { return _this._tick(); }, interval);\n    };\n    /**\n     *  Gets a unique task ID.\n     *  @private\n     */\n    TaskTimer.prototype._getUniqueTaskID = function () {\n        var num = this.taskCount;\n        var id;\n        while (!id || this.get(id)) {\n            num++;\n            id = 'task' + num;\n        }\n        return id;\n    };\n    return TaskTimer;\n}(eventemitter3_1.EventEmitter));\nexports.TaskTimer = TaskTimer;\n// ---------------------------\n// NAMESPACE\n// ---------------------------\n// tslint:disable:no-namespace\n/* istanbul ignore next */\n/** @private */\n(function (TaskTimer) {\n    /**\n     *  Represents the class that holds the configurations and the callback function\n     *  required to run a task. See {@link api/#Task|class information}.\n     *  @name TaskTimer.Task\n     *  @class\n     */\n    TaskTimer.Task = _1.Task;\n    /**\n     *  Enumerates `TaskTimer` states.\n     *  @memberof TaskTimer\n     *  @enum {String}\n     *  @readonly\n     */\n    var State;\n    (function (State) {\n        /**\n         *  Indicates that the timer is in `idle` state.\n         *  This is the initial state when the `TaskTimer` instance is first created.\n         *  Also when an existing timer is reset, it will be `idle`.\n         *  @type {String}\n         */\n        State[\"IDLE\"] = \"idle\";\n        /**\n         *  Indicates that the timer is in `running` state; such as when the timer is\n         *  started or resumed.\n         *  @type {String}\n         */\n        State[\"RUNNING\"] = \"running\";\n        /**\n         *  Indicates that the timer is in `paused` state.\n         *  @type {String}\n         */\n        State[\"PAUSED\"] = \"paused\";\n        /**\n         *  Indicates that the timer is in `stopped` state.\n         *  @type {String}\n         */\n        State[\"STOPPED\"] = \"stopped\";\n    })(State = TaskTimer.State || (TaskTimer.State = {}));\n    /**\n     *  Enumerates the `TaskTimer` event types.\n     *  @memberof TaskTimer\n     *  @enum {String}\n     *  @readonly\n     */\n    var Event;\n    (function (Event) {\n        /**\n         *  Emitted on each tick (interval) of `TaskTimer`.\n         *  @type {String}\n         */\n        Event[\"TICK\"] = \"tick\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  started.\n         *  @type {String}\n         */\n        Event[\"STARTED\"] = \"started\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  resumed.\n         *  @type {String}\n         */\n        Event[\"RESUMED\"] = \"resumed\";\n        /**\n         *  Emitted when the timer is put in `PAUSED` state.\n         *  @type {String}\n         */\n        Event[\"PAUSED\"] = \"paused\";\n        /**\n         *  Emitted when the timer is put in `STOPPED` state.\n         *  @type {String}\n         */\n        Event[\"STOPPED\"] = \"stopped\";\n        /**\n         *  Emitted when the timer is reset.\n         *  @type {String}\n         */\n        Event[\"RESET\"] = \"reset\";\n        /**\n         *  Emitted when a task is executed.\n         *  @type {String}\n         */\n        Event[\"TASK\"] = \"task\";\n        /**\n         *  Emitted when a task is added to `TaskTimer` instance.\n         *  @type {String}\n         */\n        Event[\"TASK_ADDED\"] = \"taskAdded\";\n        /**\n         *  Emitted when a task is removed from `TaskTimer` instance.\n         *  Note that this will not be emitted when `.reset()` is called; which\n         *  removes all tasks silently.\n         *  @type {String}\n         */\n        Event[\"TASK_REMOVED\"] = \"taskRemoved\";\n        /**\n         *  Emitted when a task has completed all of its executions (runs)\n         *  or reached its stopping date/time (if set). Note that this event\n         *  will only be fired if the tasks has a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @type {String}\n         */\n        Event[\"TASK_COMPLETED\"] = \"taskCompleted\";\n        /**\n         *  Emitted when a task produces an error on its execution.\n         *  @type {String}\n         */\n        Event[\"TASK_ERROR\"] = \"taskError\";\n        /**\n         *  Emitted when all tasks have completed all of their executions (runs)\n         *  or reached their stopping date/time (if set). Note that this event\n         *  will only be fired if all tasks have a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @type {String}\n         */\n        Event[\"COMPLETED\"] = \"completed\";\n    })(Event = TaskTimer.Event || (TaskTimer.Event = {}));\n})(TaskTimer || (TaskTimer = {}));\nexports.TaskTimer = TaskTimer;\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n"],"sourceRoot":""}