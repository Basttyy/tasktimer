{"version":3,"sources":["webpack://tasktimer/webpack/universalModuleDefinition","webpack://tasktimer/webpack/bootstrap","webpack://tasktimer/./src/index.ts","webpack://tasktimer/./src/utils.ts","webpack://tasktimer/./node_modules/timers-browserify/main.js","webpack://tasktimer/(webpack)/buildin/global.js","webpack://tasktimer/./node_modules/process/browser.js","webpack://tasktimer/./src/Task.ts","webpack://tasktimer/./node_modules/setimmediate/setImmediate.js","webpack://tasktimer/./src/TaskTimer.ts","webpack://tasktimer/./node_modules/eventemitter3/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","setImmediate","clearImmediate","proto","BROWSER","window","utils","NODE","type","toString","match","toLowerCase","isset","ensureArray","Array","isArray","getNumber","minimum","defaultValue","getBool","cb","args","_i","arguments","length","setTimeout","apply","concat","id","clearTimeout","isPromise","then","global","scope","self","Function","Timeout","clearFn","_id","_clearFn","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","g","e","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","len","run","marker","runClearTimeout","Item","array","noop","nextTick","push","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","__assign","assign","_1","utils_1","DEFAULT_TASK_OPTIONS","freeze","enabled","tickDelay","tickInterval","totalRuns","startDate","stopDate","immediate","removeOnCompleted","callback","Task","options","_init","_","configurable","set","currentRuns","started","timeOnFirstRun","stopped","timeOnLastRun","elapsed","_markedCompleted","Boolean","Date","now","tickCount","Math","ceil","Number","_timer","interval","timeToRun","onInterval","reset","toJSON","obj","_setTimer","timer","_emit","event","source","error","data","_done","completed","_taskCompleted","_execCallback","_this","catch","err","TaskTimer","Event","TASK_ERROR","_run","onRun","String","undefined","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","random","indexOf","slice","addEventListener","attachEvent","MessageChannel","port1","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","task","extendStatics","__extends","b","setPrototypeOf","__proto__","__","constructor","State","eventemitter3_1","DEFAULT_TIMER_OPTIONS","precision","stopOnCompleted","_super","_timeoutRef","_immediateRef","_runCount","_reset","opts","state","current","STOPPED","stopTime","startTime","keys","tasks","taskRunCount","add","forEach","_add","remove","completedTaskCount","TASK_REMOVED","start","_stop","RUNNING","_markTime","STARTED","pause","PAUSED","resume","IDLE","RESUMED","stop","RESET","_getUniqueTaskID","TASK_ADDED","tickCountAfterResume","resumeTime","hrResumeTime","TASK_COMPLETED","taskCount","COMPLETED","_tick","TICK","canRunOnTick","TASK","hrtime","_getTimeDiff","hrDiff","diff","floor","num","EventEmitter","has","prefix","Events","EE","fn","context","emitter","TypeError","listener","evt","_events","_eventsCount","clearEvent","eventNames","events","names","getOwnPropertySymbols","handlers","ee","listenerCount","a1","a2","a3","a4","a5","j","prefixed"],"mappings":"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","file":"tasktimer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tasktimer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tasktimer\"] = factory();\n\telse\n\t\troot[\"tasktimer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"lib/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Task\"));\n__export(require(\"./TaskTimer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proto = Object.prototype;\nvar BROWSER = typeof window !== 'undefined';\nvar NODE = !BROWSER;\n/** @private */\nvar utils = {\n    BROWSER: BROWSER,\n    NODE: NODE,\n    type: function (o) {\n        return proto.toString.call(o).match(/\\s(\\w+)/i)[1].toLowerCase();\n    },\n    isset: function (o) {\n        return o !== null && o !== undefined;\n    },\n    ensureArray: function (o) {\n        return utils.isset(o)\n            ? !Array.isArray(o) ? [o] : o\n            : [];\n    },\n    getNumber: function (value, minimum, defaultValue) {\n        return typeof value === 'number'\n            ? (value < minimum ? minimum : value)\n            : defaultValue;\n    },\n    getBool: function (value, defaultValue) {\n        return typeof value !== 'boolean'\n            ? defaultValue\n            : value;\n    },\n    setImmediate: function (cb) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        /* istanbul ignore if */\n        if (BROWSER) { // tested separately\n            return setTimeout(cb.apply(null, args), 0);\n        }\n        return setImmediate.apply(void 0, [cb].concat(args));\n    },\n    clearImmediate: function (id) {\n        /* istanbul ignore next */\n        if (!id)\n            return;\n        /* istanbul ignore if */\n        if (BROWSER)\n            return clearTimeout(id); // tested separately\n        clearImmediate(id);\n    },\n    /**\n     *  Checks whether the given value is a promise.\n     *  @private\n     *  @param {any} value - Value to be checked.\n     *  @return {boolean}\n     */\n    isPromise: function (value) {\n        return value\n            && utils.type(value) === 'promise'\n            && typeof value.then === 'function';\n    }\n};\nexports.utils = utils;\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n/* tslint:disable:no-empty */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\".\");\nvar utils_1 = require(\"./utils\");\n/**\n *  @private\n */\nvar DEFAULT_TASK_OPTIONS = Object.freeze({\n    enabled: true,\n    tickDelay: 0,\n    tickInterval: 1,\n    totalRuns: null,\n    startDate: null,\n    stopDate: null,\n    immediate: false,\n    removeOnCompleted: false,\n    callback: null\n});\n/**\n *  Represents the class that holds the configurations and the callback function\n *  required to run a task.\n *  @class\n */\nvar Task = /** @class */ (function () {\n    /**\n     *  Initializes a new instance of `Task` class.\n     *  @constructor\n     *  @param {ITaskOptions} options Task options.\n     */\n    function Task(options) {\n        this._init(options);\n    }\n    Object.defineProperty(Task.prototype, \"id\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) MEMBERS\n        // ---------------------------\n        /**\n         *  Gets the unique ID of the task.\n         *  @name Task#id\n         *  @type {string}\n         *  @readonly\n         */\n        get: function () {\n            return this._.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"enabled\", {\n        /**\n         *  Specifies whether this task is currently enabled. This essentially gives\n         *  you a manual control over execution. The task will always bypass the\n         *  callback while this is set to `false`.\n         *  @name Task#enabled\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.enabled;\n        },\n        set: function (value) {\n            this._.enabled = utils_1.utils.getBool(value, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickDelay\", {\n        /**\n         *  Gets or sets the number of ticks to allow before running the task for\n         *  the first time.\n         *  @name Task#tickDelay\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickDelay;\n        },\n        set: function (value) {\n            this._.tickDelay = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.tickDelay);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickInterval\", {\n        /**\n         *  Gets or sets the tick interval that the task should be run on. The unit\n         *  is \"ticks\" (not milliseconds). For instance, if the timer interval is\n         *  `1000` milliseconds, and we add a task with `5` tick intervals. The task\n         *  will run on every `5` <b>seconds</b>.\n         *  @name Task#tickInterval\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickInterval;\n        },\n        set: function (value) {\n            this._.tickInterval = utils_1.utils.getNumber(value, 1, DEFAULT_TASK_OPTIONS.tickInterval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"totalRuns\", {\n        /**\n         *  Gets or sets the total number of times the task should be run. `0` or\n         *  `null` means unlimited (until the timer has stopped).\n         *  @name Task#totalRuns\n         *  @type {number}\n         */\n        get: function () {\n            return this._.totalRuns;\n        },\n        set: function (value) {\n            this._.totalRuns = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.totalRuns);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"immediate\", {\n        /**\n         *  Specifies whether to wrap callback in a `setImmediate()` call before\n         *  executing. This can be useful if the task is not doing any I/O or using\n         *  any JS timers but synchronously blocking the event loop.\n         *  @name Task#immediate\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.immediate;\n        },\n        set: function (value) {\n            this._.immediate = utils_1.utils.getBool(value, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"currentRuns\", {\n        /**\n         *  Gets the number of times, this task has been run.\n         *  @name Task#currentRuns\n         *  @type {number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.currentRuns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"time\", {\n        /**\n         *  Gets time information for the lifetime of a task.\n         *  `#time.started` indicates the first execution time of a task.\n         *  `#time.stopped` indicates the last execution time of a task. (`0` if still running.)\n         *  `#time.elapsed` indicates the total lifetime of a task.\n         *  @name Task#time\n         *  @type {ITimeInfo}\n         *  @readonly\n         */\n        get: function () {\n            var started = this._.timeOnFirstRun || 0;\n            var stopped = this._.timeOnLastRun || 0;\n            return Object.freeze({\n                started: started,\n                stopped: stopped,\n                elapsed: stopped - started\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"callback\", {\n        /**\n         *  Gets the callback function to be executed on each run.\n         *  @name Task#callback\n         *  @type {TaskCallback}\n         *  @readonly\n         */\n        get: function () {\n            return this._.callback;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"removeOnCompleted\", {\n        /**\n         *  Gets or sets whether to remove the task (to free up memory) when task\n         *  has completed its executions (runs). For this to take affect, the task\n         *  should have `totalRuns` and/or `stopDate` configured.\n         *  @name Task#removeOnCompleted\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.removeOnCompleted;\n        },\n        set: function (value) {\n            this._.removeOnCompleted = utils_1.utils.getBool(value, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"completed\", {\n        /**\n         *  Specifies whether the task has completed all runs (executions) or\n         *  `stopDate` is reached. Note that if both `totalRuns` and `stopDate` are\n         *  omitted, this will never return `true`; since the task has no execution\n         *  limit set.\n         *  @name Task#completed\n         *  @type {boolean}\n         *  @readonly\n         */\n        get: function () {\n            // return faster if already completed\n            if (this._markedCompleted)\n                return true;\n            return Boolean((this.totalRuns && this.currentRuns >= this.totalRuns)\n                || (this._.stopDate && Date.now() >= this._.stopDate));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"canRunOnTick\", {\n        /**\n         *  Specifies whether the task can run on the current tick of the timer.\n         *  @private\n         *  @name Task#canRunOnTick\n         *  @type {boolean}\n         *  @readonly\n         */\n        get: function () {\n            if (this._markedCompleted)\n                return false;\n            var tickCount = this._.startDate\n                ? Math.ceil((Date.now() - Number(this._.startDate)) / this._timer.interval)\n                : this._timer.tickCount;\n            var timeToRun = !this._.startDate || Date.now() >= this._.startDate;\n            var onInterval = tickCount > this.tickDelay && (tickCount - this.tickDelay) % this.tickInterval === 0;\n            return Boolean(timeToRun && onInterval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Resets the current number of runs. This will keep the task running for\n     *  the same amount of `tickIntervals` initially configured.\n     *  @memberof Task\n     *  @chainable\n     *\n     *  @param {ITaskBaseOptions} [options] If set, this will also re-configure the task.\n     *\n     *  @returns {Task}\n     */\n    Task.prototype.reset = function (options) {\n        this._.currentRuns = 0;\n        if (options) {\n            var id = options.id;\n            if (id && id !== this.id)\n                throw new Error('Cannot change ID of a task.');\n            options.id = this.id;\n            this._init(options);\n        }\n        return this;\n    };\n    /**\n     *  Serialization to JSON.\n     *\n     *  Never return string From `toJSON()`. It should return an object.\n     *  @private\n     */\n    Task.prototype.toJSON = function () {\n        var obj = __assign({}, this._);\n        delete obj.callback;\n        return obj;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) MEMBERS\n    // ---------------------------\n    /**\n     *  Set reference to timer itself.\n     *  Only called by `TaskTimer`.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    Task.prototype._setTimer = function (timer) {\n        this._timer = timer;\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._emit = function (name, object) {\n        var event = {\n            name: name,\n            source: this\n        };\n        /* istanbul ignore else */\n        if (object instanceof Error) {\n            event.error = object;\n        }\n        else {\n            event.data = object;\n        }\n        this._timer.emit(name, event);\n    };\n    /**\n     *  `TaskTimer` should be informed if this task is completed. But execution\n     *  should be finished. So we do this within the `done()` function.\n     *  @private\n     */\n    Task.prototype._done = function () {\n        if (this.completed) {\n            this._markedCompleted = true;\n            this._.timeOnLastRun = Date.now();\n            this._timer._taskCompleted(this);\n        }\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._execCallback = function () {\n        var _this = this;\n        try {\n            var o = this.callback.apply(this, [this, function () { return _this._done(); }]);\n            if (this.callback.length >= 2) {\n                // handled by done() (called within the task callback by the user)\n            }\n            else if (utils_1.utils.isPromise(o)) {\n                o.then(function () {\n                    _this._done();\n                })\n                    .catch(function (err) {\n                    _this._emit(_1.TaskTimer.Event.TASK_ERROR, err);\n                });\n            }\n            else {\n                this._done();\n            }\n        }\n        catch (err) {\n            this._emit(_1.TaskTimer.Event.TASK_ERROR, err);\n        }\n    };\n    /**\n     *  Only used by `TaskTimer`.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    Task.prototype._run = function (onRun) {\n        var _this = this;\n        if (!this.enabled || this._markedCompleted)\n            return;\n        if (this.currentRuns === 0)\n            this._.timeOnFirstRun = Date.now();\n        // current runs should be set before execution or it might flow if some\n        // async runs finishes faster and some other slower.\n        this._.currentRuns++;\n        onRun();\n        if (this.immediate) {\n            utils_1.utils.setImmediate(function () { return _this._execCallback(); });\n        }\n        else {\n            this._execCallback();\n        }\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._init = function (options) {\n        if (!options || !options.id) {\n            throw new Error('A unique task ID is required.');\n        }\n        if (typeof options.callback !== 'function') {\n            throw new Error('A callback function is required for a task to run.');\n        }\n        var startDate = options.startDate, stopDate = options.stopDate;\n        if (startDate && stopDate && startDate >= stopDate) {\n            throw new Error('Task start date cannot be the same or after stop date.');\n        }\n        this._markedCompleted = false;\n        this._ = __assign({ currentRuns: 0 }, DEFAULT_TASK_OPTIONS);\n        this._.id = String(options.id);\n        this._.callback = options.callback;\n        this._.startDate = options.startDate || null;\n        this._.stopDate = options.stopDate || null;\n        // using setters for validation & default values\n        this.enabled = options.enabled;\n        this.tickDelay = options.tickDelay;\n        this.tickInterval = options.tickInterval;\n        this.totalRuns = options.totalRuns;\n        this.immediate = options.immediate;\n        this.removeOnCompleted = options.removeOnCompleted;\n    };\n    return Task;\n}());\nexports.Task = Task;\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","\"use strict\";\n/* tslint:disable:max-file-line-count */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// dep modules\nvar eventemitter3_1 = require(\"eventemitter3\");\n// own modules\nvar _1 = require(\".\");\nvar utils_1 = require(\"./utils\");\n/**\n *  @private\n */\nvar DEFAULT_TIMER_OPTIONS = Object.freeze({\n    interval: 1000,\n    precision: true,\n    stopOnCompleted: false\n});\n/**\n *  TaskTimer • https://github.com/onury/tasktimer\n *  @license MIT\n *  @copyright 2019, Onur Yıldırım <onur@cutepilot.com>\n */\n// ---------------------------\n// EventEmitter Docs\n// ---------------------------\n/**\n *  Calls each of the listeners registered for a given event name.\n *  @name TaskTimer#emit\n *  @function\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be emitted.\n *  @param {any} [data] - Data to be passed to event listeners.\n *\n *  @returns {Boolean} - `true` if the event had listeners, else `false`.\n */\n/**\n *  Return an array listing the events for which the emitter has registered\n *  listeners.\n *  @name TaskTimer#eventNames\n *  @function\n *\n *  @returns {Array} -\n */\n/**\n *  Adds the listener function to the end of the listeners array for the event\n *  named `eventName`. No checks are made to see if the listener has already\n *  been added. Multiple calls passing the same combination of `eventName` and\n *  `listener` will result in the listener being added, and called, multiple\n *  times.\n *  @name TaskTimer#on\n *  @function\n *  @chainable\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *  @param {*} [context=this] - The context to invoke the listener with.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Adds a one time listener function for the event named `eventName`. The next\n *  time `eventName` is triggered, this `listener` is removed and then invoked.\n *  @name TaskTimer#once\n *  @function\n *  @chainable\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *  @param {*} [context=this] - The context to invoke the listener with.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Removes the specified `listener` from the listener array for the event\n *  named `eventName`.\n *  @name TaskTimer#off\n *  @function\n *  @alias TaskTimer#removeListener\n *  @chainable\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be removed.\n *  @param {Function} listener - The callback function to be invoked per event.\n *  @param {*} [context=this] - Only remove the listeners that have this context.\n *  @param {Boolean} [once=false] - Only remove one-time listeners.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Gets the number of listeners listening to a given event.\n *  @name TaskTimer#listenerCount\n *  @function\n *\n *  @param {TaskTimer.Event} eventName - The name of the event.\n *\n *  @returns {Number} - The number of listeners.\n */\n/**\n *  Gets the listeners registered for a given event.\n *  @name TaskTimer#listeners\n *  @function\n *\n *  @param {TaskTimer.Event} eventName - The name of the event.\n *\n *  @returns {Array} - The registered listeners.\n */\n/**\n *  Removes all listeners, or those of the specified `eventName`.\n *  @name TaskTimer#removeAllListeners\n *  @function\n *  @chainable\n *\n *  @param {TaskTimer.Event} [eventName] - The name of the event to be removed.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  A timer utility for running periodic tasks on the given interval ticks.\n *  This is useful when you want to run or schedule multiple tasks on a single\n *  timer instance.\n *\n *  This class extends `EventEmitter3` which is an `EventEmitter` implementation\n *  for both Node and browser. Only a small set of its methods are documented in\n *  this documentation. For a complete list, refer to Node.js documentation.\n *  @class\n *  @global\n *\n *  @extends EventEmitter\n *\n *  @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n */\nvar TaskTimer = /** @class */ (function (_super) {\n    __extends(TaskTimer, _super);\n    // ---------------------------\n    // CONSTRUCTOR\n    // ---------------------------\n    /**\n     *  Constructs a new `TaskTimer` instance with the given time interval (in\n     *  milliseconds).\n     *  @constructor\n     *\n     *  @param {ITaskTimerOptions|number} [options] - Either TaskTimer options\n     *  or a base interval (in milliseconds). Since the tasks run on ticks\n     *  instead of millisecond intervals; this value operates as the base\n     *  resolution for all tasks. If you are running heavy tasks, lower interval\n     *  requires higher CPU power. This value can be updated any time by setting\n     *  the `interval` property on the instance.\n     *\n     *  @example\n     *  const timer = new TaskTimer(1000); // milliseconds\n     *  // Execute some code on each tick...\n     *  timer.on('tick', () => {\n     *      console.log('tick count: ' + timer.tickCount);\n     *      console.log('elapsed time: ' + timer.time.elapsed + ' ms.');\n     *  });\n     *  // Or add a task named 'heartbeat' that runs every 5 ticks and a total of 10 times.\n     *  const task = {\n     *      id: 'heartbeat',\n     *      tickInterval: 5, // ticks\n     *      totalRuns: 10,   // times\n     *      callback: function (task) {\n     *          console.log(task.id + ' task has run ' + task.currentRuns + ' times.');\n     *      }\n     *  };\n     *  timer.addTask(task).start();\n     */\n    function TaskTimer(options) {\n        var _this = _super.call(this) || this;\n        _this._timeoutRef = null;\n        _this._immediateRef = null;\n        _this._runCount = 0;\n        _this._reset();\n        _this._.opts = {};\n        var opts = typeof options === 'number'\n            ? { interval: options }\n            : options || {};\n        _this.interval = opts.interval;\n        _this.precision = opts.precision;\n        _this.stopOnCompleted = opts.stopOnCompleted;\n        return _this;\n    }\n    Object.defineProperty(TaskTimer.prototype, \"interval\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) PROPERTIES\n        // ---------------------------\n        /**\n         *  Gets or sets the timer interval in milliseconds.\n         *\n         *  Since the tasks run on ticks instead of millisecond intervals; this\n         *  value operates as the base resolution for all tasks. If you are running\n         *  heavy tasks; lower interval requires higher CPU power.\n         *  @name TaskTimer#interval\n         *  @type {number}\n         */\n        get: function () {\n            return this._.opts.interval;\n        },\n        set: function (value) {\n            this._.opts.interval = utils_1.utils.getNumber(value, 20, DEFAULT_TIMER_OPTIONS.interval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"precision\", {\n        /**\n         *  Gets or sets whether the timer should auto-adjust the delay between\n         *  ticks if it's off due to task load. Note that precision will be as high\n         *  as possible but it still can be off by a few milliseconds; depending on\n         *  the CPU or the load.\n         *  @name TaskTimer#precision\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.opts.precision;\n        },\n        set: function (value) {\n            this._.opts.precision = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.precision);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"stopOnCompleted\", {\n        /**\n         *  Gets or sets whether the timer should automatically stop when all tasks\n         *  are completed. For this to take affect, all added tasks should have\n         *  `totalRuns` and/or `stopDate` configured. This option can be set/changed\n         *  at any time.\n         *  @name TaskTimer#stopOnCompleted\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.opts.stopOnCompleted;\n        },\n        set: function (value) {\n            this._.opts.stopOnCompleted = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.stopOnCompleted);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"state\", {\n        /**\n         *  Gets the current state of the timer.\n         *  For possible values, see `TaskTimer.State` enumeration.\n         *  @name TaskTimer#state\n         *  @type {TaskTimer.State}\n         *  @readonly\n         */\n        get: function () {\n            return this._.state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"time\", {\n        /**\n         *  Gets time information for the latest run of the timer.\n         *  `#time.started` indicates the start time of the timer.\n         *  `#time.stopped` indicates the stop time of the timer. (`0` if still running.)\n         *  `#time.elapsed` indicates the elapsed time of the timer.\n         *  @name TaskTimer#time\n         *  @type {ITimeInfo}\n         *  @readonly\n         */\n        get: function () {\n            var current = this.state !== TaskTimer.State.STOPPED ? Date.now() : this._.stopTime;\n            return Object.freeze({\n                started: this._.startTime,\n                stopped: this._.stopTime,\n                elapsed: current - this._.startTime\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"tickCount\", {\n        /**\n         *  Gets the current tick count for the latest run of the timer.\n         *  This value will be reset to `0` when the timer is stopped or reset.\n         *  @name TaskTimer#tickCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.tickCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"taskCount\", {\n        /**\n         *  Gets the current task count. Tasks remain even after the timer is\n         *  stopped. But they will be removed if the timer is reset.\n         *  @name TaskTimer#taskCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return Object.keys(this._.tasks).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"taskRunCount\", {\n        /**\n         *  Gets the total number of all task executions (runs).\n         *  @name TaskTimer#taskRunCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.taskRunCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"runCount\", {\n        /**\n         *  Gets the total number of timer runs, including resumed runs.\n         *  @name TaskTimer#runCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._runCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // ---------------------------\n    // PUBLIC (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  Gets the task with the given ID.\n     *  @memberof TaskTimer\n     *\n     *  @param {String} id - ID of the task.\n     *\n     *  @returns {Task}\n     */\n    TaskTimer.prototype.get = function (id) {\n        return this._.tasks[id] || null;\n    };\n    /**\n     *  Adds a collection of new tasks for the timer.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {Task|ITaskOptions|TaskCallback|Array<any>} task - Either a\n     *  single task, task options object or the callback function; or a mixture\n     *  of these as an array.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task callback is not set or a task with the given\n     *  name already exists.\n     */\n    TaskTimer.prototype.add = function (task) {\n        var _this = this;\n        if (!utils_1.utils.isset(task)) {\n            throw new Error('Either a task, task options or a callback is required.');\n        }\n        utils_1.utils.ensureArray(task).forEach(function (item) { return _this._add(item); });\n        return this;\n    };\n    /**\n     *  Removes the task by the given name.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {string|Task} task - Task to be removed. Either pass the\n     *  name or the task itself.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task with the given name does not exist.\n     */\n    TaskTimer.prototype.remove = function (task) {\n        var id = typeof task === 'string' ? task : task.id;\n        task = this.get(id);\n        if (!id || !task) {\n            throw new Error(\"No tasks exist with ID: '\" + id + \"'.\");\n        }\n        // first decrement completed tasks count if this is a completed task.\n        if (task.completed && this._.completedTaskCount > 0)\n            this._.completedTaskCount--;\n        this._.tasks[id] = null;\n        delete this._.tasks[id];\n        this._emit(TaskTimer.Event.TASK_REMOVED, task);\n        return this;\n    };\n    /**\n     *  Starts the timer and puts the timer in `RUNNING` state. If it's already\n     *  running, this will reset the start/stop time and tick count, but will not\n     *  reset (or remove) existing tasks.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.start = function () {\n        this._stop();\n        this._.state = TaskTimer.State.RUNNING;\n        this._runCount++;\n        this._.tickCount = 0;\n        this._.taskRunCount = 0;\n        this._.stopTime = 0;\n        this._markTime();\n        this._.startTime = Date.now();\n        this._emit(TaskTimer.Event.STARTED);\n        this._run();\n        return this;\n    };\n    /**\n     *  Pauses the timer, puts the timer in `PAUSED` state and all tasks on hold.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.pause = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.state = TaskTimer.State.PAUSED;\n        this._emit(TaskTimer.Event.PAUSED);\n        return this;\n    };\n    /**\n     *  Resumes the timer and puts the timer in `RUNNING` state; if previuosly\n     *  paused. In this state, all existing tasks are resumed.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.resume = function () {\n        if (this.state === TaskTimer.State.IDLE) {\n            this.start();\n            return this;\n        }\n        if (this.state !== TaskTimer.State.PAUSED)\n            return this;\n        this._runCount++;\n        this._markTime();\n        this._.state = TaskTimer.State.RUNNING;\n        this._emit(TaskTimer.Event.RESUMED);\n        this._run();\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `STOPPED` state. In this state, all\n     *  existing tasks are stopped and no values or tasks are reset until\n     *  re-started or explicitly calling reset.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.stop = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.stopTime = Date.now();\n        this._.state = TaskTimer.State.STOPPED;\n        this._emit(TaskTimer.Event.STOPPED);\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `IDLE` state.\n     *  This will reset the ticks and removes all tasks silently; meaning no\n     *  other events will be emitted such as `\"taskRemoved\"`.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.reset = function () {\n        this._reset();\n        this._emit(TaskTimer.Event.RESET);\n        return this;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  @private\n     */\n    TaskTimer.prototype._emit = function (type, data) {\n        var event = {\n            name: type,\n            source: this,\n            data: data\n        };\n        return this.emit(type, event);\n    };\n    /**\n     *  Adds a new task for the timer.\n     *  @private\n     *\n     *  @param {Task|ITaskOptions|TaskCallback} options - Either a task instance,\n     *  task options object or the callback function to be executed on tick\n     *  intervals.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If the task callback is not set or a task with the\n     *  given name already exists.\n     */\n    TaskTimer.prototype._add = function (options) {\n        if (typeof options === 'function') {\n            options = {\n                callback: options\n            };\n        }\n        if (utils_1.utils.type(options) === 'object' && !options.id) {\n            options.id = this._getUniqueTaskID();\n        }\n        if (this.get(options.id)) {\n            throw new Error(\"A task with id '\" + options.id + \"' already exists.\");\n        }\n        var task = options instanceof _1.Task ? options : new _1.Task(options);\n        task._setTimer(this);\n        this._.tasks[task.id] = task;\n        this._emit(TaskTimer.Event.TASK_ADDED, task);\n        return this;\n    };\n    /**\n     *  Stops the timer.\n     *  @private\n     */\n    TaskTimer.prototype._stop = function () {\n        this._.tickCountAfterResume = 0;\n        if (this._timeoutRef) {\n            clearTimeout(this._timeoutRef);\n            this._timeoutRef = null;\n        }\n        if (this._immediateRef) {\n            utils_1.utils.clearImmediate(this._immediateRef);\n            this._immediateRef = null;\n        }\n    };\n    /**\n     *  Resets the timer.\n     *  @private\n     */\n    TaskTimer.prototype._reset = function () {\n        this._ = {\n            opts: (this._ || {}).opts,\n            state: TaskTimer.State.IDLE,\n            tasks: {},\n            tickCount: 0,\n            taskRunCount: 0,\n            startTime: 0,\n            stopTime: 0,\n            completedTaskCount: 0,\n            resumeTime: 0,\n            hrResumeTime: null,\n            tickCountAfterResume: 0\n        };\n        this._stop();\n    };\n    /**\n     *  Called (by Task instance) when it has completed all of its runs.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    TaskTimer.prototype._taskCompleted = function (task) {\n        this._.completedTaskCount++;\n        this._emit(TaskTimer.Event.TASK_COMPLETED, task);\n        if (this._.completedTaskCount === this.taskCount) {\n            this._emit(TaskTimer.Event.COMPLETED);\n            if (this.stopOnCompleted)\n                this.stop();\n        }\n        if (task.removeOnCompleted)\n            this.remove(task);\n    };\n    /**\n     *  Handler to be executed on each tick.\n     *  @private\n     */\n    TaskTimer.prototype._tick = function () {\n        var _this = this;\n        this._.state = TaskTimer.State.RUNNING;\n        var id;\n        var task;\n        var tasks = this._.tasks;\n        this._.tickCount++;\n        this._.tickCountAfterResume++;\n        this._emit(TaskTimer.Event.TICK);\n        // tslint:disable:forin\n        for (id in tasks) {\n            task = tasks[id];\n            if (!task || !task.canRunOnTick)\n                continue;\n            // below will not execute if task is disabled or already\n            // completed.\n            task._run(function () {\n                _this._.taskRunCount++;\n                _this._emit(TaskTimer.Event.TASK, task);\n            });\n        }\n        this._run();\n    };\n    /**\n     *  Marks the resume (or start) time in milliseconds or high-resolution time\n     *  if available.\n     *  @private\n     */\n    TaskTimer.prototype._markTime = function () {\n        /* istanbul ignore if */\n        if (utils_1.utils.BROWSER) { // tested separately\n            this._.resumeTime = Date.now();\n        }\n        else {\n            this._.hrResumeTime = process.hrtime();\n        }\n    };\n    /**\n     *  Gets the time difference in milliseconds sinct the last resume or start\n     *  time.\n     *  @private\n     */\n    TaskTimer.prototype._getTimeDiff = function () {\n        // Date.now() is ~2x faster than Date#getTime()\n        /* istanbul ignore if */\n        if (utils_1.utils.BROWSER)\n            return Date.now() - this._.resumeTime; // tested separately\n        var hrDiff = process.hrtime(this._.hrResumeTime);\n        return Math.ceil((hrDiff[0] * 1000) + (hrDiff[1] / 1e6));\n    };\n    /**\n     *  Runs the timer.\n     *  @private\n     */\n    TaskTimer.prototype._run = function () {\n        var _this = this;\n        if (this.state !== TaskTimer.State.RUNNING)\n            return;\n        var interval = this.interval;\n        // we'll get a precise interval by checking if our clock is already\n        // drifted.\n        if (this.precision) {\n            var diff = this._getTimeDiff();\n            // did we reach this expected tick count for the given time period?\n            // calculated count should not be greater than tickCountAfterResume\n            if (Math.floor(diff / interval) > this._.tickCountAfterResume) {\n                // if we're really late, run immediately!\n                this._immediateRef = utils_1.utils.setImmediate(function () { return _this._tick(); });\n                return;\n            }\n            // if we still have time but a bit off, update next interval.\n            interval = interval - (diff % interval);\n        }\n        this._timeoutRef = setTimeout(function () { return _this._tick(); }, interval);\n    };\n    /**\n     *  Gets a unique task ID.\n     *  @private\n     */\n    TaskTimer.prototype._getUniqueTaskID = function () {\n        var num = this.taskCount;\n        var id;\n        while (!id || this.get(id)) {\n            num++;\n            id = 'task' + num;\n        }\n        return id;\n    };\n    return TaskTimer;\n}(eventemitter3_1.EventEmitter));\nexports.TaskTimer = TaskTimer;\n// ---------------------------\n// NAMESPACE\n// ---------------------------\n// tslint:disable:no-namespace\n/* istanbul ignore next */\n/** @private */\n(function (TaskTimer) {\n    /**\n     *  Represents the class that holds the configurations and the callback function\n     *  required to run a task.\n     *  @name TaskTimer.Task\n     *  @class\n     */\n    TaskTimer.Task = _1.Task;\n    /**\n     *  Enumerates `TaskTimer` states.\n     *  @memberof TaskTimer\n     *  @enum {String}\n     *  @readonly\n     */\n    var State;\n    (function (State) {\n        /**\n         *  Indicates that the timer is in `idle` state.\n         *  This is the initial state when the `TaskTimer` instance is first created.\n         *  Also when an existing timer is reset, it will be `idle`.\n         *  @type {String}\n         */\n        State[\"IDLE\"] = \"idle\";\n        /**\n         *  Indicates that the timer is in `running` state; such as when the timer is\n         *  started or resumed.\n         *  @type {String}\n         */\n        State[\"RUNNING\"] = \"running\";\n        /**\n         *  Indicates that the timer is in `paused` state.\n         *  @type {String}\n         */\n        State[\"PAUSED\"] = \"paused\";\n        /**\n         *  Indicates that the timer is in `stopped` state.\n         *  @type {String}\n         */\n        State[\"STOPPED\"] = \"stopped\";\n    })(State = TaskTimer.State || (TaskTimer.State = {}));\n    /**\n     *  Enumerates the `TaskTimer` event types.\n     *  @memberof TaskTimer\n     *  @enum {String}\n     *  @readonly\n     */\n    var Event;\n    (function (Event) {\n        /**\n         *  Emitted on each tick (interval) of `TaskTimer`.\n         *  @type {String}\n         */\n        Event[\"TICK\"] = \"tick\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  started.\n         *  @type {String}\n         */\n        Event[\"STARTED\"] = \"started\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  resumed.\n         *  @type {String}\n         */\n        Event[\"RESUMED\"] = \"resumed\";\n        /**\n         *  Emitted when the timer is put in `PAUSED` state.\n         *  @type {String}\n         */\n        Event[\"PAUSED\"] = \"paused\";\n        /**\n         *  Emitted when the timer is put in `STOPPED` state.\n         *  @type {String}\n         */\n        Event[\"STOPPED\"] = \"stopped\";\n        /**\n         *  Emitted when the timer is reset.\n         *  @type {String}\n         */\n        Event[\"RESET\"] = \"reset\";\n        /**\n         *  Emitted when a task is executed.\n         *  @type {String}\n         */\n        Event[\"TASK\"] = \"task\";\n        /**\n         *  Emitted when a task is added to `TaskTimer` instance.\n         *  @type {String}\n         */\n        Event[\"TASK_ADDED\"] = \"taskAdded\";\n        /**\n         *  Emitted when a task is removed from `TaskTimer` instance.\n         *  Note that this will not be emitted when `.reset()` is called; which\n         *  removes all tasks silently.\n         *  @type {String}\n         */\n        Event[\"TASK_REMOVED\"] = \"taskRemoved\";\n        /**\n         *  Emitted when a task has completed all of its executions (runs)\n         *  or reached its stopping date/time (if set). Note that this event\n         *  will only be fired if the tasks has a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @type {String}\n         */\n        Event[\"TASK_COMPLETED\"] = \"taskCompleted\";\n        /**\n         *  Emitted when a task produces an error on its execution.\n         *  @type {String}\n         */\n        Event[\"TASK_ERROR\"] = \"taskError\";\n        /**\n         *  Emitted when all tasks have completed all of their executions (runs)\n         *  or reached their stopping date/time (if set). Note that this event\n         *  will only be fired if all tasks have a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @type {String}\n         */\n        Event[\"COMPLETED\"] = \"completed\";\n    })(Event = TaskTimer.Event || (TaskTimer.Event = {}));\n})(TaskTimer || (TaskTimer = {}));\nexports.TaskTimer = TaskTimer;\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n"],"sourceRoot":""}